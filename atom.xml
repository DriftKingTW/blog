<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DriftKingTW&#39;s Blog</title>
  
  <subtitle>printf(&quot;%s&quot;, &quot;Stay Curious, Stay Creative&quot;);</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.driftking.tw/"/>
  <updated>2021-02-23T06:48:23.940Z</updated>
  <id>https://blog.driftking.tw/</id>
  
  <author>
    <name>DriftKingTW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macos-app-cant-be-opened</title>
    <link href="https://blog.driftking.tw/en/2020/06/macos-app-cant-be-opened/"/>
    <id>https://blog.driftking.tw/en/2020/06/macos-app-cant-be-opened/</id>
    <published>2020-06-08T12:44:57.000Z</published>
    <updated>2021-02-23T06:48:23.940Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MacOS - 軟體無法開啟</title>
    <link href="https://blog.driftking.tw/2020/06/macos-app-cant-be-opened/"/>
    <id>https://blog.driftking.tw/2020/06/macos-app-cant-be-opened/</id>
    <published>2020-06-08T12:44:57.000Z</published>
    <updated>2021-02-23T06:48:23.921Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1591620644/blog/2020/06/Screen_Shot_2020-06-08_at_8.47.52_PM.png" alt></p><p>在網路上下載了一個 MacOS 的 App，但卻提示如上圖一樣無法開啟該如何處理？<br><a id="more"></a></p><blockquote class="colorquote info"><p>注意！這跟因為 MacOS 保護機制被攔截下來而無法開啟的 App 是不一樣的哦（非App Store下載或未識別開發者的軟體），想開啟此類警告的方法可以參照 <a href="https://support.apple.com/zh-tw/HT202491" target="_blank" rel="noopener">Apple 官方文件</a></p></blockquote><h1 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h1><ol><li>解決方法是透過終端機（Terminal）操作，首先 <code>Cmd(⌘)+空白鍵</code> 輸入 <code>Terminal</code> 啟動終端機。</li><li>接著輸入 App 所在的路徑如： <code>/Users/[YourUserName]/Downloads/</code>，或是簡單的打開 Finder 把 App 所在的資料夾拖到 Terminal 視窗後按 Enter 也可以。</li><li>再來更改軟體內啟動程式的權限(Test.app 自行替換換成要開啟的 App 名稱)： <code>chmod +x Test.app/Contents/MacOS/*</code> (+x代表可執行)</li><li>此時 App 應該就能夠正常執行，如果遇到非 App Store 等安全性問題被攔下，按照上述 <a href="https://support.apple.com/zh-tw/HT202491" target="_blank" rel="noopener">Apple 官方文件</a> 開啟即可。</li></ol><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://superuser.com/questions/898124/the-application-someapp-app-can-t-be-opened" target="_blank" rel="noopener">The application “SomeApp.app” can’t be opened</a><br><a href="https://support.apple.com/zh-tw/HT202491" target="_blank" rel="noopener">在 Mac 上開啟 app</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1591620644/blog/2020/06/Screen_Shot_2020-06-08_at_8.47.52_PM.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;在網路上下載了一個 MacOS 的 App，但卻提示如上圖一樣無法開啟該如何處理？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://blog.driftking.tw/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Logitech_Master_2S_Gesture_Button_Fix</title>
    <link href="https://blog.driftking.tw/en/2020/02/Logitech-Master-2S-Gesture-Button-Fix/"/>
    <id>https://blog.driftking.tw/en/2020/02/Logitech-Master-2S-Gesture-Button-Fix/</id>
    <published>2020-02-09T15:48:17.000Z</published>
    <updated>2021-02-23T06:48:23.939Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>羅技 Master 2S 拇指鍵維修筆記</title>
    <link href="https://blog.driftking.tw/2020/02/Logitech-Master-2S-Gesture-Button-Fix/"/>
    <id>https://blog.driftking.tw/2020/02/Logitech-Master-2S-Gesture-Button-Fix/</id>
    <published>2020-02-09T15:48:17.000Z</published>
    <updated>2021-02-23T06:48:23.919Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581517605/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_20200212_214829.jpg" alt></p><p>前陣子我的滑鼠：Logitech Master 2S 左邊的拇指鍵突然按下之後卡住了，連帶的整個滑鼠都沒辦法使用（包括去 Logitech Option 裡面把拇指鍵禁用都無效），看了下保固發現剛好也過了(´･_･`) </p><p>Google 了下發現不少人都有同樣問題，幸好維修不難，只要把兩個螺絲轉鬆即可，也不用買新零件來替換。<a id="more"></a></p><h1 id="材料及工具"><a href="#材料及工具" class="headerlink" title="材料及工具"></a>材料及工具</h1><ul><li>Torx T5 梅花起子</li><li>#PH1 十字起子</li><li>替換用滑鼠腳墊</li></ul><h1 id="維修過程"><a href="#維修過程" class="headerlink" title="維修過程"></a>維修過程</h1><p>首先拆下腳墊（膠跟表層容易分開拆的時候要注意）。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581515232/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_20191226_131652.jpg" alt></p><p>上方為兩個 T5 梅花螺絲，兩側腳墊下則是四個 #1 十字螺絲。</p><p>接著抓住上殼兩側稍微施力打開，動作不要太大力不然會扯到上下 PCB 排線。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581515749/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_20191224_201832.jpg" alt></p><p>如果只是要修拇指鍵的話其實大可不必拆排線，只需將下圖中兩個黑色螺絲稍微轉鬆半圈到一圈即可（可以按按看按鈕是否恢復正常），不過相較正常的狀況按鍵會稍微肉一點。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581516151/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_0691.jpg" alt></p><p>由於我打算順便把微動換掉所以把排線先拆下來，方法是將米白色那片往後拉，就可以卸下排線。</p><h1 id="更換微動"><a href="#更換微動" class="headerlink" title="更換微動"></a>更換微動</h1><p>首先將電池艙螺絲及電池艙卸下後，拆下四顆固定左右鍵 PCB 的螺絲：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581516487/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_0692.jpg" alt></p><p>原廠的微動是中國製 D2FC-F-7N(10M) 十萬點擊壽命的版本，我覺得手感普普而且聲音蠻大，這次順便換成了日本製 D2F-F-3-7（傳說中的頂級微動？），換了之後聲音小了不少（但絕對不是到靜音那麼誇張）。用起來回彈跟手感也都蠻合自己胃口的，這部分玩過的滑鼠微動不多不太會形容 XD</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581516934/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_20191226_132636.jpg" alt></p><p>關於要怎麼換微動應該蠻容易的，不是本篇主題就不詳述了，完成後按順序鎖回去即可。</p><h1 id="Murmur"><a href="#Murmur" class="headerlink" title="Murmur"></a>Murmur</h1><p>這次問題的罪魁禍首如下圖，萬惡的羅技塑膠部件（兩銀色螺絲鎖住的部分）：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581517063/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_20191226_141928.jpg" alt></p><p>推測是因為那片壓在拇指鍵微動上的塑膠件用久了就很容易有些變形，由於塑膠件及微動非常接近，稍微變形後容易變成按下去後就一直壓住微動，網路上蠻多人也都是一年多開始出現問題，恰好是保固過的時間(ry</p><p>這情況好像跟在 G27 上遇到的問題有點類似，同樣都是塑膠老化造成…… 雖然維修不算困難不過對於一個官方要價 3,000 NT 的滑鼠實在有點…… ╮(╯_╰)╭</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://toemat.com/logitech-mx-master-fix/" target="_blank" rel="noopener">Fixing the Logitech MX Master Scroll Wheel</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581517605/blog/2020/02/Logitech-Master-2S-Gesture-Button-Fix/IMG_20200212_214829.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;前陣子我的滑鼠：Logitech Master 2S 左邊的拇指鍵突然按下之後卡住了，連帶的整個滑鼠都沒辦法使用（包括去 Logitech Option 裡面把拇指鍵禁用都無效），看了下保固發現剛好也過了(´･_･`) &lt;/p&gt;
&lt;p&gt;Google 了下發現不少人都有同樣問題，幸好維修不難，只要把兩個螺絲轉鬆即可，也不用買新零件來替換。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="維修筆記" scheme="https://blog.driftking.tw/tags/%E7%B6%AD%E4%BF%AE%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>為什麼我的帳號會被盜？淺談密碼安全及實體金鑰</title>
    <link href="https://blog.driftking.tw/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/"/>
    <id>https://blog.driftking.tw/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/</id>
    <published>2020-02-05T13:48:41.000Z</published>
    <updated>2021-02-23T06:48:23.920Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581007571/blog/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/furchenpasswd.jpg" alt></p><p>還在不同網站使用相同的密碼嗎？你的密碼是常見的組合或幾個英文數字湊合嗎？在資訊科技的進步的現在，不論年紀大小、身份，幾乎人人都有數個甚至上百的帳號密碼。網路上層出不窮的帳號被駭客攻擊、個資洩漏事件，就算是 Google、Amazon、Facebook 等大型企業也都無可避免，那麼這時候如何靠自己保護好帳號安全就顯得非常重要了。<a id="more"></a></p><p>我想這如果是方面的專家應該也不會看這篇文XD，所以會盡量用簡單易懂的方式說明。如果沒興趣知道背後的原理，只想知道如何保護帳號的朋友們可以直接跳到結論：<a href="#如何保護好自己的帳號安全？">如何保護好自己的帳號安全？</a></p><p>在知道如何保護自己前，當然要先來瞭解密碼這玩意到底是如何運作的。</p><h1 id="我的密碼是怎麽被儲存的？"><a href="#我的密碼是怎麽被儲存的？" class="headerlink" title="我的密碼是怎麽被儲存的？"></a>我的密碼是怎麽被儲存的？</h1><p>大部分人可能會認為帳號被駭就是單純有某個厲害的駭客在一片黑底畫面上打了一堆指令，然後擊破了資料庫拿到了你的帳號密碼。實際上流程確實大概是如此，不過有時候不是駭客技術高超，而是你所使用的服務公司並沒有做好基本的密碼儲存。</p><p>為了方便理解，首先可以先把資料庫想像是一個有保全守著的倉庫，帳號密碼等資料就存放在裡面。</p><h2 id="明文儲存"><a href="#明文儲存" class="headerlink" title="明文儲存"></a>明文儲存</h2><p>明文儲存是最爛的一種方式，顧名思義就是直接把密碼原封不動的放進資料庫中如下表：</p><table><thead><tr><th>ID</th><th>帳號</th><th>密碼</th></tr></thead><tbody><tr><td>0</td><td>account1</td><td>123456</td></tr><tr><td>1</td><td>account2</td><td>abc1234</td></tr></tbody></table><p>這種方法儲存的密碼，只要攻擊者拿到資料庫的讀取權限就完蛋了（可能透過系統、程式漏洞等方式）。這意味著只要躲過保全衝進房間，密碼跟帳號就一覽無遺 (´ﾟдﾟ`) 非常不安全。</p><p>然而現在仍有不少網站還是使用這種方式處理，最簡單的判別方式就是按下忘記密碼，他們會直接發送你的完整密碼到信箱而不是要求重設定，代表儲存方式是明文儲存，正常情況就算是管理資料庫的工程師也不可能會知道密碼的明文是什麼(下面會提到為何)，所以這樣儲存密碼是非常非常非常危險的。</p><h2 id="加密-Hash"><a href="#加密-Hash" class="headerlink" title="加密/Hash"></a>加密/Hash</h2><p>把密碼加密或 Hash（雜湊）處理過會比較安全，意思是密碼會先放進一個函式處理，將密碼變成一串跟原本完全不同的英數字，而且只要改動密碼中任一個文字都會讓結果完全不同。登入帳號時，系統也是將你輸入的密碼經過同樣 Hash 處理後，跟資料庫裡面的數值比對是不是一樣即可。</p><table><thead><tr><th>ID</th><th>帳號</th><th>密碼(MD5 Hash)</th></tr></thead><tbody><tr><td>0</td><td>account1</td><td>E10ADC3949BA59ABBE56E057F20F883E</td></tr><tr><td>1</td><td>account2</td><td>A141C47927929BC2D1FB6D336A256DF4</td></tr></tbody></table><p>這種方法比起方法比起明文儲存好了些，因為攻擊者就算得到了資料庫也只能看到 Hash 過後的值。但是這種方式也不是沒有缺點，如果有兩個帳號使用了相同的密碼，那麼他們的 Hash 結果就會相同，這時可以靠其他資料猜測或彩虹表(Rainbow Table 一種整理出來的常見密碼 Hash 值表)輕易的找出密碼的原文。</p><p>簡單來說，相當於密碼寫在紙上後，會用先一把對應的鑰匙鎖起來，但是如果有相同的密碼會被放到同樣的保險箱中(原文值相等所以 Hash 值也相等)，在資料庫中可以看到這兩個相同密碼是被放在一起的，這樣只要保險箱被破解，其他放在同樣的密碼也就跟著全遭殃了。</p><blockquote class="colorquote info"><p>補充：Hash 處理過後是不可逆的，相當於這把鑰匙只能把它鎖起來不能解開，而加密的鑰匙是能夠加/解密的（依照不同加密方式可以視同一把鑰匙或不同把鑰匙）</p></blockquote><h2 id="Hash-Salting-加鹽"><a href="#Hash-Salting-加鹽" class="headerlink" title="Hash + Salting (加鹽)"></a>Hash + Salting (加鹽)</h2><p>Salting 加鹽是在上述 Hash 前，在密碼後面加上一串隨機產生的字符（像是隨機撒些鹽巴的感覺），然後再進行 Hash ，這樣即使是相同密碼，Hash 出來也是完全不同的結果，增加攻擊者破譯出密碼的難度。</p><table><thead><tr><th>ID</th><th>帳號</th><th>密碼+鹽(MD5 Hash)</th></tr></thead><tbody><tr><td>0</td><td>account1</td><td>01A682CCB070DFE296DF4BBAD02950C8</td></tr><tr><td>1</td><td>account2</td><td>B9BAA63E43E35D93366C4401EFFCC631</td></tr></tbody></table><p>這種方法解決了上述同樣的密碼被放在一起的問題，大幅增加攻擊者攻擊的難度，但是使用的密碼過於簡單常見還是很容易被破解的，方法會在下方如何攻擊提到。</p><blockquote class="colorquote info"><p>此處使用MD5僅為示範用，實際應該選擇安全性較高的 Hash 演算法。</p></blockquote><h1 id="駭客是怎麽盜取我的密碼的？"><a href="#駭客是怎麽盜取我的密碼的？" class="headerlink" title="駭客是怎麽盜取我的密碼的？"></a>駭客是怎麽盜取我的密碼的？</h1><p>我們可能都看過朋友的帳號被盜用、或是某某知名人物的私人資訊檔案被流出，甚至自己曾經也是受害者。想知道如何保護好自己的話，當然得先瞭解一下所謂「駭客」是怎麽拿到你的帳號密碼的囉！（輸入密碼被看到、密碼借朋友不小心外流等比較物理性的方式就不另外討論）</p><blockquote class="colorquote info"><p>這邊我們不討論明文儲存的密碼，畢竟那只要有系統漏洞就完蛋了。</p></blockquote><p>以下攻擊皆假設在密碼有經過 Hash 的方式處理下，攻擊者拿到了帳號密碼的資料庫，要取得密碼的方式就是透過運算能力很強的電腦，把一串密碼經過 Hash 過後跟資料庫比對，如果相等就代表找到密碼原文了。</p><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>暴力破解是最簡單無腦的方法，實際應用比例不高。電腦會把各種密碼組合都 Hash 後去比對。</p><p>今天一個資料庫被攻擊者拿到了，可以放到電腦中將各種密碼組合都 Hash 過後進行比對，如果一樣的就可以記錄下來，表示這組密碼的 Hash 值是多少，這種方式<strong>越短(8字元以內)、全是小寫、英數字簡單的排列等不複雜的密碼最容易被破解出來</strong>，若是用 MD5、SHA-1 等比較老舊的 Hash 函式甚至幾秒內就能輕鬆破解。</p><h2 id="字典攻擊"><a href="#字典攻擊" class="headerlink" title="字典攻擊"></a>字典攻擊</h2><p>雖然上述的暴力破解，要是用了長密碼就會指數性增加破解的難度(需要嘗試的排列組合太多種)，但是要對付長密碼現在最常見的方式其實是用字典攻擊。</p><p>假設今天我用了一個密碼 “password1”，有九個字元。雖然這時暴力破解會變的非常困難，但是卻是一個超多人都會用的密碼 <a href="https://edition.cnn.com/2019/04/22/uk/most-common-passwords-scli-gbr-intl/index.html" target="_blank" rel="noopener">根據此報告使用率排名第九</a>，字典攻擊就是用在這種地方。所謂字典通常是大部分常見被破解的密碼 Hash 值的記錄表，裡面有大量常用密碼的對應資料，可以直接比對資料庫拿到的密碼 Hash 值得到密碼原文，在現實資料庫做破解效率上會比暴力破解高很多。</p><p>常用密碼的數量其實非常龐大，被洩漏的密碼可能幾億上到幾十億，像是一些<strong>有規律的</strong> “password1234”、”password12341234” 等通常都被重複使用過，一些粗話或<strong>有意義的英文單字</strong>都非常容易被字典收錄，或是在<strong>單字或名字後面加日期</strong>等，雖然長度夠但反而是更容易被破解（還有那種用<strong>注音對照英文</strong>打出來的，只要有人用過一樣不安全）。另外 <strong>“Pa$$w0rd”</strong> 之類把幾個字改成相似符號的也很常見，絕對不是替換掉幾個特殊符號換個大小寫就代表密碼沒問題。</p><h1 id="怎麼樣的密碼是弱密碼？"><a href="#怎麼樣的密碼是弱密碼？" class="headerlink" title="怎麼樣的密碼是弱密碼？"></a>怎麼樣的密碼是弱密碼？</h1><p>根據上面兩種攻擊方式，我們可總結出哪些密碼是太弱容易被破解的：</p><ol><li>長度太短(8以內)</li><li>純數字</li><li>全小寫/大寫</li><li>有意義的文字(包含其中幾個字替換符號、尾端加數字生日等)</li><li>常用的注音文密碼(例如：au4a83)</li></ol><h1 id="如何保護好自己的帳號安全？"><a href="#如何保護好自己的帳號安全？" class="headerlink" title="如何保護好自己的帳號安全？"></a>如何保護好自己的帳號安全？</h1><p>我們不一定能保證存放帳號資料庫資料不外流，但是可以做以下幾件事情來保護自己的帳號安全，讓攻擊者就算拿到資料庫也無法輕易得知密碼：</p><h2 id="用一個不容易被破解的密碼"><a href="#用一個不容易被破解的密碼" class="headerlink" title="用一個不容易被破解的密碼"></a>用一個不容易被破解的密碼</h2><p>建議可以選四個以上平時較少使用單字或名詞排列，雖然是有字面意義的但是長度夠長的話基本上可以免去暴力破解、也不容易跟別人的密碼相同，就比較不容易被字典收錄。想要更進一步加強的話可以隨機在一些地方加上一個特殊符號，就能夠再提升破解難度。</p><h2 id="每個網站都使用不同的密碼"><a href="#每個網站都使用不同的密碼" class="headerlink" title="每個網站都使用不同的密碼"></a>每個網站都使用不同的密碼</h2><p>這是非常重要但大部分人都沒做到的（我自己以前也是），假設一個密碼真的很不幸的被破解了，要是其他網頁都用同樣的密碼，攻擊者就能夠輕易的去嘗試登入你所有的帳號。但是帳號一多了還是很難記住所有密碼，此時就建議用密碼管理器來代勞。</p><h2 id="使用密碼管理器-Password-Manager"><a href="#使用密碼管理器-Password-Manager" class="headerlink" title="使用密碼管理器(Password Manager)"></a>使用密碼管理器(Password Manager)</h2><p>密碼處理最好的方法當然是用密碼管理器，他能夠產生的隨機長密碼，這樣只要記住一個安全的主密碼，其他密碼就可以自動填入或複製貼上，藉此登入所有的帳號。基本上主流的密碼管理器安全性都不差，所以只要做好保護措施基本上不太會有問題，這裡就不另外推薦。</p><h2 id="開啟兩步驗證-2FA-Two-Factor-Authentication"><a href="#開啟兩步驗證-2FA-Two-Factor-Authentication" class="headerlink" title="開啟兩步驗證(2FA, Two-Factor Authentication)"></a>開啟兩步驗證(2FA, Two-Factor Authentication)</h2><p>兩步驟驗證顧名思義就是要兩個步驟才能夠登入。目前市面上最常見的 2FA 是簡訊驗證，也就是登入時除了輸入帳號密碼，系統還會發SMS簡訊給你一串數字，要求輸入數字才能夠登入。</p><p>其他常見的 2FA 登入還有：</p><ul><li>TOTP（Time-based One-time Password 時間性一次性密碼）<blockquote><p>會利用時間來產生一段密碼(通常六位數)，在30秒內會失效，其他像 Steam 所使用的驗證器(Authenticator)也是TOTP的一種。</p></blockquote></li><li>Trusted Device 信任裝置<blockquote><p>Google 帳號通常都會開這個功能，登入時會要求在你平常使用的裝置上按確認登入，相比TOTP方便了些。</p></blockquote></li><li>Backup Codes 備份碼<blockquote><p>假設手機無法接收簡訊、信任裝置也無法使用，這時就能夠使用備份碼登入，通常為備援選項。這種備份碼通常都是一次性的，使用後就要重新產生新的備份碼。</p></blockquote></li></ul><blockquote class="colorquote info"><p>目前簡訊方式的 2FA 已經被認為不夠安全、能夠利用攔截或釣魚的方式攻擊，可以的話盡量不要使用。</p></blockquote><h2 id="實體金鑰"><a href="#實體金鑰" class="headerlink" title="實體金鑰"></a>實體金鑰</h2><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1580971326/blog/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/IMG_20191223_165024.jpg" alt></p><p>實體金鑰顧名思義就是一把實體的 USB 鑰匙(通常作為實體的 2FA 驗證手段)，設定完成之後會要求插入該金鑰才能夠登入，常見的有 <a href="https://www.yubico.com/" target="_blank" rel="noopener">Yubikey</a> 、 <a href="https://cloud.google.com/titan-security-key" target="_blank" rel="noopener">Titan Security Key</a> 等。是目前安全性最高的等級的 2FA 方式，而且相比其他方式使用上不算是麻煩（某些程度上用實體金鑰還比輸入TOTP或等簡訊還快）</p><p>實體金鑰相對於傳統 2FA 的優勢是，斷絕了被釣魚網站騙的可能。簡訊等方式還是有可能會被攔截或利用欺騙方式取得，但實體金鑰是無法偽造及複製的，唯一的攻擊方法只有取得帳號密碼而且實體金鑰物理上被拿走才能夠登入。</p><p>不過我認為對於一般使用者來說，實體金鑰目前還是非必要的，目前很多主流網路服務商都有提供實體金鑰的 2FA 選項了(Google、Twitter、Facebook、Gandi等)，但是還是沒有到很普及的程度，通常一隻金鑰需要花費 40~50USD 不等，加上在行動裝置支援上還不算非常成熟，對大部分人來說不一定是那麼適合。</p><p>如果你想非常好的保護自己的帳號安全，瞭解實體金鑰的使用，我會在另一篇文章詳述(待補)。</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>要保護帳號安全可能常常聽到，不過多數人不會當一回事或嫌麻煩，當被盜之後資料洩漏、信用卡被盜刷才後悔莫及。資訊安全如地震火災等天災，未雨綢繆遠大於亡羊補牢。如果你真正在乎你的帳號隱私及安全，現在是時候把那些弱密碼處理一下了(^u^)（<del>至於那些覺得沒差的，駭客們會非常感謝你們的</del></p><ol><li>密碼強度要夠、不要重複使用密碼</li><li>使用密碼管理器</li><li>開啟兩步驟驗證(避免使用簡訊驗證)</li><li>使用實體金鑰（可選）</li></ol><p>以上，祝各位下次不會在密碼洩漏清單中看到自己的密碼 (ゝ∀･)</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.youtube.com/watch?v=3NjQ9b3pgIg" target="_blank" rel="noopener">How to Choose a Password - Computerphile</a></p><p><a href="https://www.cnet.com/how-to/strong-passwords-9-rules-to-help-you-make-and-remember-your-login-credentials/" target="_blank" rel="noopener">Strong passwords: 9 rules to help you make and remember your login credentials</a></p><p><a href="https://www.youtube.com/watch?v=8ZtInClXe1Q" target="_blank" rel="noopener">How NOT to Store Passwords! - Computerphile</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1581007571/blog/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/furchenpasswd.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;還在不同網站使用相同的密碼嗎？你的密碼是常見的組合或幾個英文數字湊合嗎？在資訊科技的進步的現在，不論年紀大小、身份，幾乎人人都有數個甚至上百的帳號密碼。網路上層出不窮的帳號被駭客攻擊、個資洩漏事件，就算是 Google、Amazon、Facebook 等大型企業也都無可避免，那麼這時候如何靠自己保護好帳號安全就顯得非常重要了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="密碼" scheme="https://blog.driftking.tw/tags/%E5%AF%86%E7%A2%BC/"/>
    
  </entry>
  
  <entry>
    <title>Why_My_Account_Got_Hacked_-_The_Password_Security_and_Physical_Key</title>
    <link href="https://blog.driftking.tw/en/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/"/>
    <id>https://blog.driftking.tw/en/2020/02/Why-My-Account-Got-Hacked-The-Password-Security-and-Physical-Key/</id>
    <published>2020-02-05T13:48:41.000Z</published>
    <updated>2021-02-23T06:48:23.939Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用 Raspberry Pi 控制 PWM 風扇及轉速偵測</title>
    <link href="https://blog.driftking.tw/2019/11/Using-Raspberry-Pi-to-Control-a-PWM-Fan-and-Monitor-its-Speed/"/>
    <id>https://blog.driftking.tw/2019/11/Using-Raspberry-Pi-to-Control-a-PWM-Fan-and-Monitor-its-Speed/</id>
    <published>2019-11-25T14:00:00.000Z</published>
    <updated>2021-02-23T06:48:23.916Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574826956/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/Fur_chan_w_Noctua_fan_2.jpg" alt></p><p>相信不少人都會為熱情的 Pi 4 加上風扇散熱，不過小風扇噪音就成了問題，由於 Pi 也不是隨時都滿載需要風扇全速運轉，所以我們可以利用 <a href="https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E5%AF%AC%E5%BA%A6%E8%AA%BF%E8%AE%8A" target="_blank" rel="noopener">PWM (Pulse Width Modulation)</a> 來控制轉速。讓風扇在提高到一定溫度時才啟動，或是降低轉速來降低噪音。<a id="more"></a></p><h1 id="硬體接線"><a href="#硬體接線" class="headerlink" title="硬體接線"></a>硬體接線</h1><p>我使用風扇是 <a href="https://noctua.at/en/nf-a4x10-5v-pwm" target="_blank" rel="noopener">Noctua NF-A4 5V PWM</a> ，一個 40mm、5V 的 PWM 控速風扇，下圖是本次所使用的腳位：</p><ul><li>黃色黑色分別為 5V 電源及接地</li><li>綠色為轉速信號</li><li>藍色為 PWM 控制訊號輸入</li></ul><blockquote class="colorquote info"><p>若風扇不支援 PWM 轉速控制（只有兩線或三線）可以參考 <a href="https://www.youtube.com/watch?v=oJ32CMxliCQ" target="_blank" rel="noopener">#138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller</a> 此影片或 <a href="https://www.instructables.com/id/PWM-Regulated-Fan-Based-on-CPU-Temperature-for-Ras/" target="_blank" rel="noopener">PWM Regulated Fan Based on CPU Temperature for Raspberry Pi</a> 利用 BJT 電晶體來做 PWM 控制。</p></blockquote><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574608109/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_93F334AD3BFC-1.jpg" alt></p><p>轉速訊號線（綠）的部分，由於風扇內是一個開集極電路（OC），所以需要一個上拉電阻（Pull-up resistor）至 Vcc 才能夠讀取到波形，這邊可以參考 <a href="https://noctua.at/media/wysiwyg/Noctua_PWM_specifications_white_paper.pdf" target="_blank" rel="noopener">Noctua PWM 規格白皮書(英文)</a>（大部分的風扇轉速訊號應該都是這種設計，保險起見建議還是要查看廠商提供的資料）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574608621/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_6F5175335AA4-1.jpg" alt></p><blockquote class="colorquote danger"><p>注意！樹莓派的 GPIO 為 3.3V，所以上拉電阻 Vcc <strong>一定</strong>要接到 <strong>3.3V</strong>，若接到 5V 會造成樹莓派電路損毀！</p></blockquote><p>上拉電阻我這邊選擇了 1kΩ 1/4W，上面官方所提供的資料為電流不可以超過 5mA ，根據 $V=IR$ 可算出電阻應該要 660Ω 以上，如果過低會造成風扇電路過載。</p><p>PWM 訊號線因為大部分的微控制器或單晶片的 GPIO 都有做好穩定 PWM 方波的輸出電路了，所以這裡就不需要另外自製電路，直接接上 PWM 輸出腳即可（一般的 GPIO 貌似也能靠軟體設定輸出 PWM 訊號，不過硬體輸出較為穩定），<a href="https://pinout.xyz/" target="_blank" rel="noopener">腳位參考</a>。</p><p>順帶一提，由於風扇沒有附轉杜邦的線材，所以另外買了 Molex 2510 4PIN (2.54mm間距) 連接器，不過要另外將防呆卡槽消掉一部份，如果有現成的專用風扇線就不用（一般風扇為了相容 3P 連接器所以不會做滿）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574610745/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_20191123_141251.jpg" alt></p><p>以下是接上 Pi 3 做硬體測試及軟體調教的照片：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574610248/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_20191124_234259.jpg" alt></p><p>硬體安裝完成後，接著就用軟體來控制風扇吧！</p><h1 id="軟體控制"><a href="#軟體控制" class="headerlink" title="軟體控制"></a>軟體控制</h1><h3 id="PWM-GPIO-測試"><a href="#PWM-GPIO-測試" class="headerlink" title="PWM GPIO 測試"></a>PWM GPIO 測試</h3><p>這裡可以先選擇使用 <a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a> 來進行測試接線是否正確及 GPIO 是否正常，如果不測試可以直接跳到 <a href="#PWM-訊號控制轉速">PWM 訊號控制轉速</a>。</p><p>記得之前的 Pi 版本都是有預裝的，不過目前新版 Pi 4B 還沒加入預設，我們可以透過手動的方式來升級：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget https://project-downloads.drogon.net/wiringpi-latest.deb</span><br><span class="line">sudo dpkg -i wiringpi-latest.deb</span><br></pre></td></tr></table></figure><p>檢查版本：</p><p><code>gpio -v</code></p><blockquote class="colorquote info"><p>撰文時最新版為 2.52</p></blockquote><p>查看 GPIO 狀態：</p><p><code>gpio readall</code></p><p>把 PIN1 設定為 PWM 模式（注意這邊的編號為 wiring-pi 的編號，可參考<a href="https://pinout.xyz/" target="_blank" rel="noopener">Pi GPIO Pinout</a>）</p><p><code>gpio mode 1 pwm</code></p><p>設定 PWM 訊號寬度（數值可為 0~1023）</p><p><code>gpio pwm 1 [數值]</code></p><p>檢查風扇是否成功用 PWM 控制，如果有隨著設定數值改變就沒問題了！</p><h3 id="PWM-訊號控制轉速"><a href="#PWM-訊號控制轉速" class="headerlink" title="PWM 訊號控制轉速"></a>PWM 訊號控制轉速</h3><p>我把控制程式放在 Github 上了，可以點擊參考：<a href="https://github.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Contorl/blob/master/fan_control.py" target="_blank" rel="noopener">DriftKingTW/Raspberry-Pi-PWM-Fan-Control</a></p><p>建立資料夾存放要用到的程式：</p><p><code>mkdir -p Scripts</code></p><p><code>cd Scripts/</code></p><p>下載程式：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Contorl/master/fan_control.py</span><br></pre></td></tr></table></figure><p>開啟試試能不能成功控制：</p><p><code>python fan_control.py</code></p><p>沒問題的話就可以把程式設定為開機自動啟動：</p><p>編輯 <code>rc.local</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>在 <code>exit 0</code> 之上加入以下指令：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /home/pi/Scripts/fan_control.py &amp;</span><br></pre></td></tr></table></figure><blockquote class="colorquote info"><p>檔案路徑可能會不同，記得使用絕對路徑。最後的 “&amp;” 符號代表背景執行。</p></blockquote><p>如果你不想知道原理，可以直接轉跳閱讀：<a href="#讀取轉速訊號">讀取轉速訊號</a></p><p>PWM 控制原理簡單來說就是：輸出方波，利用工作週期（Duty Cycle 又稱佔空比）來控制風扇的轉速，假設方波訊號處於高電位所佔一個週期的時間是 50% 代表讓風扇處於半速狀態，以此類推 75% 即是風扇 75% 速度，更詳細可以參考維基：<a href="https://zh.wikipedia.org/zh-tw/%E8%84%88%E8%A1%9D%E5%AF%AC%E5%BA%A6%E8%AA%BF%E8%AE%8A" target="_blank" rel="noopener">脈衝寬度調變</a></p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574611525/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_AABD9EE6FAB5-1.jpg" alt></p><p>接著來分析程式的部分，這邊使用 Python 來做控制：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 載入需要的函式庫</span></span><br><span class="line"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"><span class="hljs-keyword">import</span> signal</span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 設定可照自身情況調整</span></span><br><span class="line">FAN_PIN = <span class="hljs-number">18</span>            <span class="hljs-comment"># PWM 控制腳位，設定成你想接的位置即可，注意是 BCM 編號</span></span><br><span class="line">WAIT_TIME = <span class="hljs-number">1</span>           <span class="hljs-comment"># 每次控制的更新頻率，單位為秒</span></span><br><span class="line">PWM_FREQ = <span class="hljs-number">25000</span>        <span class="hljs-comment"># PWM 頻率，這邊根據 Noctua 規格使用 25kHz，其他風扇弄個 50 之類即可，若動作怪怪的可以在自行測試</span></span><br><span class="line"></span><br><span class="line">MIN_TEMP = <span class="hljs-number">40</span>           <span class="hljs-comment"># 最小啟動溫度</span></span><br><span class="line">MAX_TEMP = <span class="hljs-number">70</span>           <span class="hljs-comment"># 最高溫度</span></span><br><span class="line">FAN_LOW = <span class="hljs-number">40</span>            <span class="hljs-comment"># 風扇低轉速</span></span><br><span class="line">FAN_HIGH = <span class="hljs-number">100</span>          <span class="hljs-comment"># 風扇高轉速</span></span><br><span class="line">FAN_OFF = <span class="hljs-number">0</span>             <span class="hljs-comment"># 風扇關閉</span></span><br><span class="line">FAN_MAX = <span class="hljs-number">100</span>           <span class="hljs-comment"># 風扇全開</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 利用 vcgencmd 取得CPU溫度</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCpuTemperature</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    res = os.popen(<span class="hljs-string">'vcgencmd measure_temp'</span>).readline()</span><br><span class="line">    temp =(res.replace(<span class="hljs-string">"temp="</span>,<span class="hljs-string">""</span>).replace(<span class="hljs-string">"'C\n"</span>,<span class="hljs-string">""</span>))</span><br><span class="line">    <span class="hljs-comment">#print("temp is &#123;0&#125;".format(temp)) # 把註解取消可觀察溫度</span></span><br><span class="line">    <span class="hljs-keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 設定風扇溫度</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setFanSpeed</span><span class="hljs-params">(speed)</span>:</span></span><br><span class="line">    fan.start(speed)</span><br><span class="line">    <span class="hljs-keyword">return</span>()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 控制風扇動作</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handleFanSpeed</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    temp = float(getCpuTemperature())</span><br><span class="line">    <span class="hljs-comment"># 如果溫度小於設定的最小啟動溫度即把風扇關閉</span></span><br><span class="line">    <span class="hljs-keyword">if</span> temp &lt; MIN_TEMP:</span><br><span class="line">        setFanSpeed(FAN_OFF)</span><br><span class="line">        <span class="hljs-comment">#print("Fan OFF") # 把註解取消可查看風扇訊息</span></span><br><span class="line">    <span class="hljs-comment"># 如果溫度超過最高溫度將風扇 100% 開啟    </span></span><br><span class="line">    <span class="hljs-keyword">elif</span> temp &gt; MAX_TEMP:</span><br><span class="line">        setFanSpeed(FAN_MAX)</span><br><span class="line">        <span class="hljs-comment">#print("Fan MAX") # 把註解取消可查看風扇訊息</span></span><br><span class="line">    <span class="hljs-comment"># 如果溫度介於最小及最大值之間，計算動態風扇速度</span></span><br><span class="line">    <span class="hljs-comment"># 每一階(step)為：(高轉速-低轉速)/(最高溫度-最小溫度)</span></span><br><span class="line">    <span class="hljs-comment"># 利用算出來的 step 算出線性的簡易 轉速/溫度 反應曲線</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        step = (FAN_HIGH - FAN_LOW)/(MAX_TEMP - MIN_TEMP)   </span><br><span class="line">        temp -= MIN_TEMP</span><br><span class="line">        setFanSpeed(FAN_LOW + ( round(temp) * step ))</span><br><span class="line">        <span class="hljs-comment">#print(FAN_LOW + ( round(temp) * step )) # 把註解取消可查看風扇訊息</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 主程式</span></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># 設定 GPIO</span></span><br><span class="line">    GPIO.setwarnings(<span class="hljs-keyword">False</span>)</span><br><span class="line">    GPIO.setmode(GPIO.BCM)</span><br><span class="line">    GPIO.setup(FAN_PIN, GPIO.OUT, initial=GPIO.LOW)</span><br><span class="line">    fan = GPIO.PWM(FAN_PIN,PWM_FREQ)</span><br><span class="line">    setFanSpeed(FAN_OFF)</span><br><span class="line">    <span class="hljs-comment"># 無限迴圈，按照設定的時間間隔不斷偵測溫度來設定轉速</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">        handleFanSpeed()</span><br><span class="line">        time.sleep(WAIT_TIME)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">except</span> KeyboardInterrupt: <span class="hljs-comment"># 如果使用者按下 ctrl+c 的例外處理</span></span><br><span class="line">    setFanSpeed(FAN_HIGH)</span><br><span class="line">    <span class="hljs-comment">#GPIO.cleanup() # 此註解可以清除本程式用的 GPIO 設定，如果要用上一行的指令本行保留註解狀態</span></span><br></pre></td></tr></table></figure><h3 id="讀取轉速訊號"><a href="#讀取轉速訊號" class="headerlink" title="讀取轉速訊號"></a>讀取轉速訊號</h3><p>程式同樣放在 Github 上：<a href="https://github.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/blob/master/read_fan_speed.py" target="_blank" rel="noopener">DriftKingTW/Raspberry-Pi-PWM-Fan-Control</a></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/master/read_fan_speed.py</span><br></pre></td></tr></table></figure><p>開啟即可開始輸出風扇的轉速(RPM)，預設每秒偵測一次</p><p><code>python read_fan_speed.py</code></p><p>分析程式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 載入需要的函式庫</span></span><br><span class="line"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 腳位設定</span></span><br><span class="line">TACH = <span class="hljs-number">24</span>       <span class="hljs-comment"># 風扇轉速輸出腳位</span></span><br><span class="line">PULSE = <span class="hljs-number">2</span>       <span class="hljs-comment"># Noctua 規格為風扇轉一圈有兩次脈衝，大部分風扇也是兩次，少數四次</span></span><br><span class="line">WAIT_TIME = <span class="hljs-number">1</span>   <span class="hljs-comment"># 單位為秒，每次更新時間</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># GPIO 設定</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setwarnings(<span class="hljs-keyword">False</span>)</span><br><span class="line">GPIO.setup(TACH, GPIO.IN, pull_up_down=GPIO.PUD_UP) <span class="hljs-comment"># Pull up to 3.3V</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 要用到的全域變數</span></span><br><span class="line">t = time.time()</span><br><span class="line">rpm = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 計算 RPM 的函數</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fell</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> t</span><br><span class="line">    <span class="hljs-keyword">global</span> rpm </span><br><span class="line"></span><br><span class="line">    dt = time.time() - t    <span class="hljs-comment"># 取得時間計算出週期</span></span><br><span class="line">    <span class="hljs-keyword">if</span> dt &lt; <span class="hljs-number">0.005</span>: <span class="hljs-keyword">return</span>   <span class="hljs-comment"># 無視過短的脈衝（雜訊）</span></span><br><span class="line"></span><br><span class="line">    freq = <span class="hljs-number">1</span> / dt   <span class="hljs-comment"># 取得頻率（週期倒數）</span></span><br><span class="line">    rpm = (freq / PULSE) * <span class="hljs-number">60</span>   <span class="hljs-comment"># 計算RPM：將頻率除以風扇轉一圈的脈衝數，在乘以60（每分鐘）</span></span><br><span class="line">    t = time.time() <span class="hljs-comment"># 更新時間</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 新增監聽器，偵測到波形降下來的時候呼叫 fell() 計算一次 RPM</span></span><br><span class="line">GPIO.add_event_detect(TACH, GPIO.FALLING, fell)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 主程式</span></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># 無限迴圈不斷偵測</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">"%.f RPM"</span> % rpm   <span class="hljs-comment"># 輸出轉速到螢幕上</span></span><br><span class="line">        rpm = <span class="hljs-number">0</span> <span class="hljs-comment"># 歸零</span></span><br><span class="line">        time.sleep(WAIT_TIME)   <span class="hljs-comment"># 每秒偵測一次</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">except</span> KeyboardInterrupt: <span class="hljs-comment"># 同上處理 ctrl+c 例外</span></span><br><span class="line">    GPIO.cleanup()  <span class="hljs-comment"># 清除本程式用的 GPIO 狀態</span></span><br></pre></td></tr></table></figure><h1 id="溫度表現"><a href="#溫度表現" class="headerlink" title="溫度表現"></a>溫度表現</h1><p>目前還在等 Pi4 的 3D 列印風扇支架來，等安裝好再補上。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://noctua.at/media/wysiwyg/Noctua_PWM_specifications_white_paper.pdf" target="_blank" rel="noopener">Noctua PWM specifications white paper</a></p><p><a href="https://noctua.at/en/nf-a4x10-5v-pwm/specification" target="_blank" rel="noopener">NF A4x10 5V PWM</a></p><p><a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a></p><p><a href="http://wiringpi.com/wiringpi-updated-to-2-52-for-the-raspberry-pi-4b/" target="_blank" rel="noopener">wiringPi updated to 2.52 for the Raspberry Pi 4B</a></p><p><a href="https://www.youtube.com/watch?v=oJ32CMxliCQ" target="_blank" rel="noopener">#138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller</a></p><p><a href="https://gist.github.com/rxseger/2b27e661221b6f350b859d13f256cf29" target="_blank" rel="noopener">rxseger/tachfan.py</a></p><p><a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/" target="_blank" rel="noopener">raspberry-gpio-python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574826956/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/Fur_chan_w_Noctua_fan_2.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;相信不少人都會為熱情的 Pi 4 加上風扇散熱，不過小風扇噪音就成了問題，由於 Pi 也不是隨時都滿載需要風扇全速運轉，所以我們可以利用 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E5%AF%AC%E5%BA%A6%E8%AA%BF%E8%AE%8A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PWM (Pulse Width Modulation)&lt;/a&gt; 來控制轉速。讓風扇在提高到一定溫度時才啟動，或是降低轉速來降低噪音。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Using Raspberry Pi to Control a PWM Fan and Monitor its Speed</title>
    <link href="https://blog.driftking.tw/en/2019/11/Using-Raspberry-Pi-to-Control-a-PWM-Fan-and-Monitor-its-Speed/"/>
    <id>https://blog.driftking.tw/en/2019/11/Using-Raspberry-Pi-to-Control-a-PWM-Fan-and-Monitor-its-Speed/</id>
    <published>2019-11-25T14:00:00.000Z</published>
    <updated>2021-02-23T06:48:23.936Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574826956/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/Fur_chan_w_Noctua_fan_2.jpg" alt></p><p>A lot of people uses fan to cool down their Raspberry Pi 4, but the fan’s noise is quiet problem (in a quiet room). In most case pi didn’t need that amount of cooling performance, so we can use <a href="https://en.wikipedia.org/wiki/Pulse-width_modulation" target="_blank" rel="noopener">PWM (Pulse Width Modulation)</a> to control fan speed and reduce the noise.<a id="more"></a></p><h1 id="Wiring"><a href="#Wiring" class="headerlink" title="Wiring"></a>Wiring</h1><p>I use <a href="https://noctua.at/en/nf-a4x10-5v-pwm" target="_blank" rel="noopener">Noctua NF-A4 5V PWM</a>, a 40mm, 5V PWM fan. Here’s the wiring diagram:</p><ul><li>Yellow: 5V</li><li>Black: GND</li><li>Green: RPM signal</li><li>Blue: PWM signal input</li></ul><blockquote class="colorquote info"><p>If your fan doesn’t support PWM control, then you can see <a href="https://www.youtube.com/watch?v=oJ32CMxliCQ" target="_blank" rel="noopener">#138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller</a> or <a href="https://www.instructables.com/id/PWM-Regulated-Fan-Based-on-CPU-Temperature-for-Ras/" target="_blank" rel="noopener">PWM Regulated Fan Based on CPU Temperature for Raspberry Pi</a> to use a BJT transistor to use PWM control.</p></blockquote><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574608109/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_93F334AD3BFC-1.jpg" alt></p><p>The fan’s RPM signal is an OC(Open-Collector) circuit design (in most fan), so you’ll need a pull-up resistor to measure output waveform according to <a href="https://noctua.at/media/wysiwyg/Noctua_PWM_specifications_white_paper.pdf" target="_blank" rel="noopener">Noctua PWM white paper</a>.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574608621/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_6F5175335AA4-1.jpg" alt></p><blockquote class="colorquote danger"><p>Warning! The Pi has 3.3V GPIO, so your pull-up resistor must be connect to 3.3V ONLY! You will fry your Pi if Vcc is connected to 5V.</p></blockquote><p>The pull-up resistor that I use is 1kΩ 1/4W. The white paper says the maximum current is 5mA. According to Ohm’s Law: $V=IR$, the resistor should be 660Ω or larger to protect your fan.</p><p>Most micro-controller or SBC already have a decent circuit to generate PWM signal, you don’t need special circuit to generate it.</p><p>I use a Molex 2510 4PIN (2.54mm) connector to connect the fan. (Need to cut out some fool-proof board to fit.)</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574610745/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_20191123_141251.jpg" alt></p><p>Here’s a photo testing hardware and program on Pi 3B.`</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574610248/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_20191124_234259.jpg" alt></p><h1 id="Program-Control"><a href="#Program-Control" class="headerlink" title="Program Control"></a>Program Control</h1><h3 id="PWM-GPIO-Test"><a href="#PWM-GPIO-Test" class="headerlink" title="PWM GPIO Test"></a>PWM GPIO Test</h3><p>I use <a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a> to test PWM signal. If you don’t want to test it, jump to <a href="#Use-PWM-to-Control-Fan-Speed">Use PWM to Control Fan Speed</a>.</p><p>The Pi4 haven’t update to latest version of wiring-pi yet, need to update it manually.</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget https://project-downloads.drogon.net/wiringpi-latest.deb</span><br><span class="line">sudo dpkg -i wiringpi-latest.deb</span><br></pre></td></tr></table></figure><p>Version check：</p><p><code>gpio -v</code></p><blockquote class="colorquote info"><p>The latest version when I write this post is 2.52</p></blockquote><p>Read GPIO status：</p><p><code>gpio readall</code></p><p>Set pin 1 to PWM mode (using wiring-pi pin number: <a href="https://pinout.xyz/" target="_blank" rel="noopener">Pi GPIO Pinout</a>).</p><p><code>gpio mode 1 pwm</code></p><p>Set PWM signal (number from 0~1023)</p><p><code>gpio pwm 1 [number]</code></p><p>Check the fan is working as you expect.</p><h3 id="Use-PWM-to-Control-Fan-Speed"><a href="#Use-PWM-to-Control-Fan-Speed" class="headerlink" title="Use PWM to Control Fan Speed"></a>Use PWM to Control Fan Speed</h3><p>The control script is on: <a href="https://github.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/blob/master/fan_control.py" target="_blank" rel="noopener">DriftKingTW/Raspberry-Pi-PWM-Fan-Control</a></p><p><code>mkdir -p Scripts</code></p><p><code>cd Scripts/</code></p><p>Download the python script:</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/master/fan_control.py</span><br></pre></td></tr></table></figure><p><code>python fan_control.py</code></p><p>And make it auto start: </p><p>Edit <code>rc.local</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>Add the following line after <code>exit 0</code> :</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /home/pi/Scripts/fan_control.py &amp;</span><br></pre></td></tr></table></figure><blockquote class="colorquote info"><p>The route might be different for you. Make sure you’re using absolute path. The ‘&amp;’ symbol means this script runs in background.</p></blockquote><p>If you don’t want to know the theory part, than go ahead to: <a href="#Reading-RPM-Signal">Reading RPM Signal</a></p><p>PWM uses square wave’s duty-cycle to reduce the average value of voltage, if the duty cycle is 50%, the fan will spin at 50% of it’s full speed; duty cycle 75%, fan 75%, and so on. More detail: <a href="https://en.wikipedia.org/wiki/Pulse-width_modulation" target="_blank" rel="noopener">Pulse-width modulation</a></p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574611525/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/IMG_AABD9EE6FAB5-1.jpg" alt></p><p>And we can take a look at the control script:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"><span class="hljs-keyword">import</span> signal</span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Configuration</span></span><br><span class="line">FAN_PIN = <span class="hljs-number">18</span>            <span class="hljs-comment"># BCM pin used to drive PWM fan</span></span><br><span class="line">WAIT_TIME = <span class="hljs-number">1</span>           <span class="hljs-comment"># [s] Time to wait between each refresh</span></span><br><span class="line">PWM_FREQ = <span class="hljs-number">25000</span>        <span class="hljs-comment"># [Hz] 25kHz for Noctua PWM control</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Configurable temperature and fan speed</span></span><br><span class="line">MIN_TEMP = <span class="hljs-number">40</span></span><br><span class="line">MAX_TEMP = <span class="hljs-number">70</span></span><br><span class="line">FAN_LOW = <span class="hljs-number">40</span></span><br><span class="line">FAN_HIGH = <span class="hljs-number">100</span></span><br><span class="line">FAN_OFF = <span class="hljs-number">0</span></span><br><span class="line">FAN_MAX = <span class="hljs-number">100</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Get CPU's temperature</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCpuTemperature</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    res = os.popen(<span class="hljs-string">'vcgencmd measure_temp'</span>).readline()</span><br><span class="line">    temp =(res.replace(<span class="hljs-string">"temp="</span>,<span class="hljs-string">""</span>).replace(<span class="hljs-string">"'C\n"</span>,<span class="hljs-string">""</span>))</span><br><span class="line">    <span class="hljs-comment">#print("temp is &#123;0&#125;".format(temp)) # Uncomment for testing</span></span><br><span class="line">    <span class="hljs-keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Set fan speed</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setFanSpeed</span><span class="hljs-params">(speed)</span>:</span></span><br><span class="line">    fan.start(speed)</span><br><span class="line">    <span class="hljs-keyword">return</span>()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Handle fan speed</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handleFanSpeed</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    temp = float(getCpuTemperature())</span><br><span class="line">    <span class="hljs-comment"># Turn off the fan if temperature is below MIN_TEMP</span></span><br><span class="line">    <span class="hljs-keyword">if</span> temp &lt; MIN_TEMP:</span><br><span class="line">        setFanSpeed(FAN_OFF)</span><br><span class="line">        <span class="hljs-comment">#print("Fan OFF") # Uncomment for testing</span></span><br><span class="line">    <span class="hljs-comment"># Set fan speed to MAXIMUM if the temperature is above MAX_TEMP</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> temp &gt; MAX_TEMP:</span><br><span class="line">        setFanSpeed(FAN_MAX)</span><br><span class="line">        <span class="hljs-comment">#print("Fan MAX") # Uncomment for testing</span></span><br><span class="line">    <span class="hljs-comment"># Caculate dynamic fan speed</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        step = (FAN_HIGH - FAN_LOW)/(MAX_TEMP - MIN_TEMP)   </span><br><span class="line">        temp -= MIN_TEMP</span><br><span class="line">        setFanSpeed(FAN_LOW + ( round(temp) * step ))</span><br><span class="line">        <span class="hljs-comment">#print(FAN_LOW + ( round(temp) * step )) # Uncomment for testing</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># Setup GPIO pin</span></span><br><span class="line">    GPIO.setwarnings(<span class="hljs-keyword">False</span>)</span><br><span class="line">    GPIO.setmode(GPIO.BCM)</span><br><span class="line">    GPIO.setup(FAN_PIN, GPIO.OUT, initial=GPIO.LOW)</span><br><span class="line">    fan = GPIO.PWM(FAN_PIN,PWM_FREQ)</span><br><span class="line">    setFanSpeed(FAN_OFF)</span><br><span class="line">    <span class="hljs-comment"># Handle fan speed every WAIT_TIME sec</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">        handleFanSpeed()</span><br><span class="line">        time.sleep(WAIT_TIME)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">except</span> KeyboardInterrupt: <span class="hljs-comment"># trap a CTRL+C keyboard interrupt</span></span><br><span class="line">    setFanSpeed(FAN_HIGH)</span><br><span class="line">    <span class="hljs-comment">#GPIO.cleanup() # resets all GPIO ports used by this function</span></span><br></pre></td></tr></table></figure><h3 id="Reading-RPM-Signal"><a href="#Reading-RPM-Signal" class="headerlink" title="Reading RPM Signal"></a>Reading RPM Signal</h3><p>Github: <a href="https://github.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/blob/master/read_fan_speed.py" target="_blank" rel="noopener">DriftKingTW/Raspberry-Pi-PWM-Fan-Control</a></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/DriftKingTW/Raspberry-Pi-PWM-Fan-Control/master/read_fan_speed.py</span><br></pre></td></tr></table></figure><p>Run script and you will get RPM value every second:</p><p><code>python read_fan_speed.py</code></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Pin configuration</span></span><br><span class="line">TACH = <span class="hljs-number">24</span>       <span class="hljs-comment"># Fan's tachometer output pin</span></span><br><span class="line">PULSE = <span class="hljs-number">2</span>       <span class="hljs-comment"># Noctua fans puts out two pluses per revolution</span></span><br><span class="line">WAIT_TIME = <span class="hljs-number">1</span>   <span class="hljs-comment"># [s] Time to wait between each refresh</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Setup GPIO</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setwarnings(<span class="hljs-keyword">False</span>)</span><br><span class="line">GPIO.setup(TACH, GPIO.IN, pull_up_down=GPIO.PUD_UP) <span class="hljs-comment"># Pull up to 3.3V</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Setup variables</span></span><br><span class="line">t = time.time()</span><br><span class="line">rpm = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Caculate pulse frequency and RPM</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fell</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> t</span><br><span class="line">    <span class="hljs-keyword">global</span> rpm</span><br><span class="line"></span><br><span class="line">    dt = time.time() - t</span><br><span class="line">    <span class="hljs-keyword">if</span> dt &lt; <span class="hljs-number">0.005</span>: <span class="hljs-keyword">return</span> <span class="hljs-comment"># Reject spuriously short pulses</span></span><br><span class="line"></span><br><span class="line">    freq = <span class="hljs-number">1</span> / dt</span><br><span class="line">    rpm = (freq / PULSE) * <span class="hljs-number">60</span></span><br><span class="line">    t = time.time()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Add event to detect</span></span><br><span class="line">GPIO.add_event_detect(TACH, GPIO.FALLING, fell)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">        <span class="hljs-keyword">print</span> <span class="hljs-string">"%.f RPM"</span> % rpm</span><br><span class="line">        rpm = <span class="hljs-number">0</span></span><br><span class="line">        time.sleep(<span class="hljs-number">1</span>)   <span class="hljs-comment"># Detect every second</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">except</span> KeyboardInterrupt: <span class="hljs-comment"># trap a CTRL+C keyboard interrupt</span></span><br><span class="line">    GPIO.cleanup() <span class="hljs-comment"># resets all GPIO ports used by this function</span></span><br></pre></td></tr></table></figure><h1 id="Thermal-Performance"><a href="#Thermal-Performance" class="headerlink" title="Thermal Performance"></a>Thermal Performance</h1><p>My Pi4’s 40mm fan mount haven’t arrived yet, I’ll update this section when I get it.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://noctua.at/media/wysiwyg/Noctua_PWM_specifications_white_paper.pdf" target="_blank" rel="noopener">Noctua PWM specifications white paper</a></p><p><a href="https://noctua.at/en/nf-a4x10-5v-pwm/specification" target="_blank" rel="noopener">NF A4x10 5V PWM</a></p><p><a href="http://wiringpi.com/" target="_blank" rel="noopener">Wiring Pi</a></p><p><a href="http://wiringpi.com/wiringpi-updated-to-2-52-for-the-raspberry-pi-4b/" target="_blank" rel="noopener">wiringPi updated to 2.52 for the Raspberry Pi 4B</a></p><p><a href="https://www.youtube.com/watch?v=oJ32CMxliCQ" target="_blank" rel="noopener">#138 Variable Speed Cooling Fan for Raspberry Pi using PWM and PID controller</a></p><p><a href="https://gist.github.com/rxseger/2b27e661221b6f350b859d13f256cf29" target="_blank" rel="noopener">rxseger/tachfan.py</a></p><p><a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/" target="_blank" rel="noopener">raspberry-gpio-python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574826956/blog/2019/11/Using%20Raspberry%20Pi%20to%20Control%20a%20PWM%20Fan%20and%20Monitor%20its%20Speed/Fur_chan_w_Noctua_fan_2.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;A lot of people uses fan to cool down their Raspberry Pi 4, but the fan’s noise is quiet problem (in a quiet room). In most case pi didn’t need that amount of cooling performance, so we can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Pulse-width_modulation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PWM (Pulse Width Modulation)&lt;/a&gt; to control fan speed and reduce the noise.&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>A Better Server Status Monitoring Tool - Glances (htop/top Alternative)</title>
    <link href="https://blog.driftking.tw/en/2019/11/A-Better-Server-Status-Monitoring-Tool-Glances-htop-top-Alternative/"/>
    <id>https://blog.driftking.tw/en/2019/11/A-Better-Server-Status-Monitoring-Tool-Glances-htop-top-Alternative/</id>
    <published>2019-11-18T11:50:00.000Z</published>
    <updated>2021-02-23T06:48:23.935Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I’m looking for a temperture and cpu status monitor for my Pi nas server. <code>vcgencmd</code> command and <code>htop</code> get the jobs done, but it’s always better to have them in the same window (<code>htop</code> can’t show temperture which bothers me alot). So I found an cross-platform, python-based <code>htop</code> alternative - <a href="https://nicolargo.github.io/glances/" target="_blank" rel="noopener">Glances</a>, it’s easy to install and super handy. The only downside is that it uses a bit more cpu resources than I expected (on Pi4 4GB version).<a id="more"></a></p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>In Linux (Debian, Ubuntu, etc.) you can simply use <code>apt-get</code> to install.</p><p><code>sudo apt-get install glances</code></p><p>If you have <code>Homebrew</code> installed on MacOS, use <code>brew</code> to install.</p><p><code>brew install glances</code></p><p>Note that I have run into some trouble when installing on MacOS, it shows the error message like this:</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/Cellar/glances/3.1.3/libexec/bin/glances", line 6, in &lt;module&gt;</span><br><span class="line">    from pkg_resources import load_entry_point</span><br><span class="line">ModuleNotFoundError: No module named 'pkg_resources'</span><br></pre></td></tr></table></figure><p>After googling, post-install should solved the problem.</p><p><code>brew postinstall python3</code></p><p>Windows need to install <code>python</code> first, and use <code>pip</code> to get <code>glances</code></p><p><code>pip install glances</code></p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><h2 id="Host-mode"><a href="#Host-mode" class="headerlink" title="Host mode"></a>Host mode</h2><p>Open Terminal and run glances</p><p><code>glances</code></p><p>Show RAW JSON status</p><p><code>glances --stdout cpu.user,mem.used,load</code></p><p>or in CSV format</p><p><code>glances --stdout-csv now,cpu.user,mem.used,load</code></p><p>Enter <code>q</code> or <code>Esc</code> to quit</p><h2 id="Server-Client-Mode"><a href="#Server-Client-Mode" class="headerlink" title="Server/Client Mode"></a>Server/Client Mode</h2><p>Server side:</p><p><code>glances -s</code></p><p>Client side (change SERVER-IP to your own server ip):</p><p><code>glances -s SERVER-IP</code></p><h2 id="Remote-mode-Web-UI"><a href="#Remote-mode-Web-UI" class="headerlink" title="Remote mode (Web-UI)"></a>Remote mode (Web-UI)</h2><p>Server side:</p><p><code>glances -w</code></p><p>Client side (change SERVER-IP to your own server ip, default port <code>61208</code>):</p><p><code>http://SERVER-IP:61208</code></p><p>Done! Now you can monitoring all status (including cpu-temperture) in comfort! (Image shows my Pi nas’ status)</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574080130/blog/2019/11/%E9%9B%BB%E8%85%A6%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%B7%A8%E5%B9%B3%E8%87%BA%E7%9A%84%E9%96%8B%E6%BA%90%E7%9B%A3%E6%8E%A7%E5%A5%BD%E5%B9%AB%E6%89%8B%20-%20Glances/Screen_Shot_2019-11-18_at_7.54.46_PM.png" alt></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://nicolargo.github.io/glances/" target="_blank" rel="noopener">Glances</a></p><p><a href="https://github.com/asciinema/asciinema/issues/260" target="_blank" rel="noopener">fails after brew installation: ModuleNotFoundError: No module named ‘pkg_resources’ #260</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I’m looking for a temperture and cpu status monitor for my Pi nas server. &lt;code&gt;vcgencmd&lt;/code&gt; command and &lt;code&gt;htop&lt;/code&gt; get the jobs done, but it’s always better to have them in the same window (&lt;code&gt;htop&lt;/code&gt; can’t show temperture which bothers me alot). So I found an cross-platform, python-based &lt;code&gt;htop&lt;/code&gt; alternative - &lt;a href=&quot;https://nicolargo.github.io/glances/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Glances&lt;/a&gt;, it’s easy to install and super handy. The only downside is that it uses a bit more cpu resources than I expected (on Pi4 4GB version).&lt;/p&gt;
    
    </summary>
    
    
      <category term="RaspberryPi" scheme="https://blog.driftking.tw/tags/RaspberryPi/"/>
    
      <category term="StatusMonitor" scheme="https://blog.driftking.tw/tags/StatusMonitor/"/>
    
  </entry>
  
  <entry>
    <title>電腦/伺服器跨平臺的開源監控好幫手 - Glances</title>
    <link href="https://blog.driftking.tw/2019/11/A-Better-Server-Status-Monitoring-Tool-Glances-htop-top-Alternative/"/>
    <id>https://blog.driftking.tw/2019/11/A-Better-Server-Status-Monitoring-Tool-Glances-htop-top-Alternative/</id>
    <published>2019-11-18T11:50:00.000Z</published>
    <updated>2021-02-23T06:48:23.914Z</updated>
    
    <content type="html"><![CDATA[<p>原先是在尋找一個能夠遠端監控伺服器狀態（基於樹莓派的 NAS）的軟體，由於每次都要連上 ssh 查看比較麻煩，加上 <code>htop</code> 我覺得能看到的訊息也不夠齊全（如溫度等），於是發現了一個跨平臺、支援遠端 Web-UI 且開源免費的方便監控軟體 - <a href="https://nicolargo.github.io/glances/" target="_blank" rel="noopener">Glances</a><a id="more"></a>，且安裝操作都非常簡單，有需要的朋友不坊試試，唯一的缺點大概就是基於 Python ，效能不是那麼理想吧（在 Pi 上感覺 CPU 佔用率比預期稍高了一點XD）</p><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>在 Linux（Debian、Ubuntu等）可以直接 <code>apt-get</code> 安裝</p><p><code>sudo apt-get install glances</code></p><p>MacOS 有安裝 <code>Homebrew</code> 的話可以用 <code>brew</code> 安裝</p><p><code>brew install glances</code></p><p>我自己在 MacOS 安裝時有發生小問題，安裝完後執行出現以下錯誤</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/Cellar/glances/3.1.3/libexec/bin/glances", line 6, in &lt;module&gt;</span><br><span class="line">    from pkg_resources import load_entry_point</span><br><span class="line">ModuleNotFoundError: No module named 'pkg_resources'</span><br></pre></td></tr></table></figure><p>用 <code>brew doctor</code> 無法解決問題，查詢了一下用 <code>postinstall python3</code> 即可解決</p><p><code>brew postinstall python3</code></p><p>Windows 等系統安裝好 <code>Python</code>，可透過 <code>pip</code> 安裝</p><p><code>pip install glances</code></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="一般主機模式"><a href="#一般主機模式" class="headerlink" title="一般主機模式"></a>一般主機模式</h2><p>在 Command Line 直接輸入即可啟動</p><p><code>glances</code></p><p>顯示 JSON 格式（後面接上想看的狀態）</p><p><code>glances --stdout cpu.user,mem.used,load</code></p><p>CSV 格式</p><p><code>glances --stdout-csv now,cpu.user,mem.used,load</code></p><p>按 <code>q</code> 或 <code>Esc</code> 離開</p><h2 id="Server-模式"><a href="#Server-模式" class="headerlink" title="Server 模式"></a>Server 模式</h2><p>在想查看狀態的電腦上</p><p><code>glances -s</code></p><p>在客戶端輸入查看伺服器的狀態（SERVER-IP 替換為上述 Server 的 IP）</p><p><code>glances -s SERVER-IP</code></p><h2 id="遠端-Web-UI-模式"><a href="#遠端-Web-UI-模式" class="headerlink" title="遠端 Web-UI 模式"></a>遠端 Web-UI 模式</h2><p>在想查看狀態的電腦上</p><p><code>glances -w</code></p><p>在同網域下的任何裝置瀏覽器上輸入（SERVER-IP 替換為上述 Server 的 IP），預設 Port 為 <code>61208</code></p><p><code>http://SERVER-IP:61208</code></p><p>就能夠遠端監控了，除了CPU、MEM等狀態，同時也能看到溫度，如下圖所示（圖中是樹莓派 NAS 的狀態）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1574080130/blog/2019/11/%E9%9B%BB%E8%85%A6%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%B7%A8%E5%B9%B3%E8%87%BA%E7%9A%84%E9%96%8B%E6%BA%90%E7%9B%A3%E6%8E%A7%E5%A5%BD%E5%B9%AB%E6%89%8B%20-%20Glances/Screen_Shot_2019-11-18_at_7.54.46_PM.png" alt></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://nicolargo.github.io/glances/" target="_blank" rel="noopener">Glances</a></p><p><a href="https://github.com/asciinema/asciinema/issues/260" target="_blank" rel="noopener">fails after brew installation: ModuleNotFoundError: No module named ‘pkg_resources’ #260</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原先是在尋找一個能夠遠端監控伺服器狀態（基於樹莓派的 NAS）的軟體，由於每次都要連上 ssh 查看比較麻煩，加上 &lt;code&gt;htop&lt;/code&gt; 我覺得能看到的訊息也不夠齊全（如溫度等），於是發現了一個跨平臺、支援遠端 Web-UI 且開源免費的方便監控軟體 - &lt;a href=&quot;https://nicolargo.github.io/glances/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Glances&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
      <category term="MonitoringTool/監控軟體" scheme="https://blog.driftking.tw/tags/MonitoringTool-%E7%9B%A3%E6%8E%A7%E8%BB%9F%E9%AB%94/"/>
    
  </entry>
  
  <entry>
    <title>安裝 Aria2 在 RaspberryPi 上搭建低耗下載機</title>
    <link href="https://blog.driftking.tw/en/2019/11/%E5%AE%89%E8%A3%9D%20Aria2%20%E5%9C%A8%20RaspberryPi%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%BD%8E%E8%80%97%E4%B8%8B%E8%BC%89%E6%A9%9F%E5%AE%89%E8%A3%9D%20Aria2%20%E5%9C%A8%20RaspberryPi%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%BD%8E%E8%80%97%E4%B8%8B%E8%BC%89%E6%A9%9F/"/>
    <id>https://blog.driftking.tw/en/2019/11/安裝 Aria2 在 RaspberryPi 上搭建低耗下載機安裝 Aria2 在 RaspberryPi 上搭建低耗下載機/</id>
    <published>2019-11-15T16:15:00.000Z</published>
    <updated>2021-02-23T06:48:23.937Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a> 是一個超輕量但功能的強大開源下載器，支援多點下載、多種協定、檔案分割下載、可透過 JSON-PRC 或 XML-PRC 遠端控制等功能。<a id="more"></a></p><p><a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a> 的特性讓他非常適合放在樹莓派等單晶片上執行，輕量不耗資源、又能遠端操作，我的 Pi 剛好作為 NAS，搭配下載器可以直接存入 NAS 硬碟中，在做遠端存取且不用關機非常方便，本篇將會記錄安裝 <a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a> 在 Pi 上的過程。</p><h1 id="安裝-Aria2"><a href="#安裝-Aria2" class="headerlink" title="安裝 Aria2"></a>安裝 Aria2</h1><p><code>sudo apt-get update</code></p><p><code>sudo apt-get install aria2</code></p><h1 id="設定-Aria2"><a href="#設定-Aria2" class="headerlink" title="設定 Aria2"></a>設定 Aria2</h1><p>建立設定資料夾與檔案(注意這邊不用 <code>sudo</code>，否則還要回過頭來改資料夾權限給 user)</p><p><code>mkdir -p ~/.aria/aria2/</code></p><p><code>touch ~/.aria2/aria2.session</code></p><p><code>vim ~/.aria2/aria2.conf</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">## Files</span><br><span class="line">dir=/mnt/Share/Downloads</span><br><span class="line">disk-cache=32M</span><br><span class="line">file-allocation=trunc</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## Downloads</span><br><span class="line">max-concurrent-downloads=10</span><br><span class="line">max-connection-per-server=16</span><br><span class="line">min-split-size=10M</span><br><span class="line">split=5</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#max-download-limit=0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line">disable-ipv6=false</span><br><span class="line"></span><br><span class="line">## Sessions</span><br><span class="line">save-session=/home/pi/.aria2/aria2.session</span><br><span class="line">input-file=/home/pi/.aria2/aria2.session</span><br><span class="line">save-session-interval=60</span><br><span class="line"></span><br><span class="line">## RPC Settings</span><br><span class="line">enable-rpc=true</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#rpc-secret=secret</span><br><span class="line">#event-poll=select</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"></span><br><span class="line">## Others</span><br><span class="line">enable-dht=true</span><br><span class="line">enable-dht6=true</span><br><span class="line">enable-peer-exchange=true</span><br></pre></td></tr></table></figure><p>在 <code>Files</code> 部分的 <code>dir</code> 是指檔案下載路徑，這裡我把它掛在外接硬碟上方便存取。</p><p>接著啟動 <code>aria2c</code> 並指定設定文件所在位置。</p><p><code>aria2c --conf-path=/home/pi/.aria2/aria2.conf</code></p><p>看一下進程有沒有成功</p><p><code>ps aux | grep aria2</code></p><h1 id="設定開機啟動服務"><a href="#設定開機啟動服務" class="headerlink" title="設定開機啟動服務"></a>設定開機啟動服務</h1><p>建立設定文件</p><p><code>sudo vim /lib/systemd/system/aria2.service</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Aria2 Service</span><br><span class="line">Requires=network.target</span><br><span class="line">After=dhcpcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=pi</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.conf</span><br><span class="line">ExecReload=/usr/bin/kill -HUP $MAINPID</span><br><span class="line">ExecStop=/usr/bin/kill -s STOP $MAINPID</span><br><span class="line">RestartSec=1min</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>接著載入服務並啟動檢查是否成功：</p><p><code>sudo systemctl daemon-reload</code></p><p><code>sudo systemctl enable aria2</code></p><p><code>sudo systemctl start aria2</code></p><p><code>sudo systemctl status aria2</code></p><p>成功的話會顯示類似下方狀態</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">● aria2.service - Aria2 Service</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/aria2.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Fri 2019-11-15 16:01:37 GMT; 4s ago</span><br><span class="line"> Main PID: 1509 (aria2c)</span><br><span class="line">    Tasks: 1 (limit: 4915)</span><br><span class="line">   Memory: 3.4M</span><br><span class="line">   CGroup: /system.slice/aria2.service</span><br><span class="line">           └─1509 /usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.conf</span><br><span class="line"></span><br><span class="line">Nov 15 16:01:37 pinas systemd[1]: Started Aria2 Service.</span><br><span class="line">Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [WARN] Neither --rpc-secret nor a combination of --rpc-user and --rpc</span><br><span class="line">Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv4 RPC: listening on TCP port 6800</span><br><span class="line">Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv6 RPC: listening on TCP port 6800</span><br></pre></td></tr></table></figure><h1 id="安裝-Nginx-網頁伺服器"><a href="#安裝-Nginx-網頁伺服器" class="headerlink" title="安裝 Nginx 網頁伺服器"></a>安裝 Nginx 網頁伺服器</h1><p>安裝 nginx （若有其他網頁伺服器也可以，如 Apache 等）</p><p><code>sudo apt install nginx</code></p><p>啟動服務</p><p><code>sudo /etc/init.d/nginx start</code></p><p>在瀏覽器輸入 <a href="http://RASPBERRYPI-IP/" target="_blank" rel="noopener">http://RASPBERRYPI-IP/</a></p><p>看到 <code>Welcome to nginx!</code> 等字樣代表伺服器成功安裝並且正常執行了</p><h1 id="安裝-AriaNG-網頁操作界面"><a href="#安裝-AriaNG-網頁操作界面" class="headerlink" title="安裝 AriaNG 網頁操作界面"></a>安裝 AriaNG 網頁操作界面</h1><p>下載 <a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">AriaNG</a>，撰文時最新版為1.1.4，有更新版可以自行檢查。</p><p><code>wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/AriaNg-1.1.4.zip</code></p><p>解壓縮</p><p><code>unzip AriaNg-1.1.4.zip -d aria-ng</code></p><p>把資料夾搬去伺服器的網頁目錄底下（ nginx 預設為 /var/www/html ）</p><p><code>sudo mv aria-ng /var/www/html/</code></p><p>此時瀏覽器輸入 <code>http://RASPBERRYPI-IP/aria-ng</code> 即可看到 AriaNG 的界面了。</p><p>在如下設定分頁內填入相關設定（ IP 或 hostname，預設 Port 為 <code>6800</code> ），看到 <code>Connected</code> 即可開始遠端操作下載等任務了！</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/v1573834062/blog/2019/11/%E5%AE%89%E8%A3%9D%20Aria2%20%E5%9C%A8%20RaspberryPi%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%BD%8E%E8%80%97%E4%B8%8B%E8%BC%89%E6%A9%9F/Screen_Shot_2019-11-16_at_12.07.37_AM.png" alt></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://github.com/aria2/aria2" target="_blank" rel="noopener">aria2</a></p><p><a href="https://github.com/mayswind/AriaNg" target="_blank" rel="noopener">AriaNG</a></p><p><a href="https://medium.com/@sajithneyo/remote-download-server-in-linux-using-aria2-5bd3ee1a54b2" target="_blank" rel="noopener">Remote Download Server in Linux using Aria2</a></p><p><a href="https://li-aaron.github.io/2019/01/aira2-on-raspberry/" target="_blank" rel="noopener">用树莓派 Raspberry Pi 远程下载 (aria2)</a></p><p><a href="https://www.raspberrypi.org/documentation/remote-access/web-server/nginx.md" target="_blank" rel="noopener">Setting up an NGINX web server on a Raspberry Pi</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://aria2.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Aria2&lt;/a&gt; 是一個超輕量但功能的強大開源下載器，支援多點下載、多種協定、檔案分割下載、可透過 JSON-PRC 或 XML-PRC 遠端控制等功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="RaspberryPi" scheme="https://blog.driftking.tw/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>安裝 Aria2 在 RaspberryPi 上搭建低耗下載機</title>
    <link href="https://blog.driftking.tw/2019/11/%E5%AE%89%E8%A3%9D%20Aria2%20%E5%9C%A8%20RaspberryPi%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%BD%8E%E8%80%97%E4%B8%8B%E8%BC%89%E6%A9%9F%E5%AE%89%E8%A3%9D%20Aria2%20%E5%9C%A8%20RaspberryPi%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%BD%8E%E8%80%97%E4%B8%8B%E8%BC%89%E6%A9%9F/"/>
    <id>https://blog.driftking.tw/2019/11/安裝 Aria2 在 RaspberryPi 上搭建低耗下載機安裝 Aria2 在 RaspberryPi 上搭建低耗下載機/</id>
    <published>2019-11-15T16:15:00.000Z</published>
    <updated>2021-02-23T06:48:23.917Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a> 是一個超輕量但功能的強大開源下載器，支援多點下載、多種協定、檔案分割下載、可透過 JSON-PRC 或 XML-PRC 遠端控制等功能。<a id="more"></a></p><p><a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a> 的特性讓他非常適合放在樹莓派等單晶片上執行，輕量不耗資源、又能遠端操作，我的 Pi 剛好作為 NAS，搭配下載器可以直接存入 NAS 硬碟中，在做遠端存取且不用關機非常方便，本篇將會記錄安裝 <a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a> 在 Pi 上的過程。</p><h1 id="安裝-Aria2"><a href="#安裝-Aria2" class="headerlink" title="安裝 Aria2"></a>安裝 Aria2</h1><p><code>sudo apt-get update</code></p><p><code>sudo apt-get install aria2</code></p><h1 id="設定-Aria2"><a href="#設定-Aria2" class="headerlink" title="設定 Aria2"></a>設定 Aria2</h1><p>建立設定資料夾與檔案(注意這邊不用 <code>sudo</code>，否則還要回過頭來改資料夾權限給 user)</p><p><code>mkdir -p ~/.aria/aria2/</code></p><p><code>touch ~/.aria2/aria2.session</code></p><p><code>vim ~/.aria2/aria2.conf</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">## Files</span><br><span class="line">dir=/mnt/Share/Downloads</span><br><span class="line">disk-cache=32M</span><br><span class="line">file-allocation=trunc</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## Downloads</span><br><span class="line">max-concurrent-downloads=10</span><br><span class="line">max-connection-per-server=16</span><br><span class="line">min-split-size=10M</span><br><span class="line">split=5</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#max-download-limit=0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line">disable-ipv6=false</span><br><span class="line"></span><br><span class="line">## Sessions</span><br><span class="line">save-session=/home/pi/.aria2/aria2.session</span><br><span class="line">input-file=/home/pi/.aria2/aria2.session</span><br><span class="line">save-session-interval=60</span><br><span class="line"></span><br><span class="line">## RPC Settings</span><br><span class="line">enable-rpc=true</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#rpc-secret=secret</span><br><span class="line">#event-poll=select</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"></span><br><span class="line">## Others</span><br><span class="line">enable-dht=true</span><br><span class="line">enable-dht6=true</span><br><span class="line">enable-peer-exchange=true</span><br></pre></td></tr></table></figure><p>在 <code>Files</code> 部分的 <code>dir</code> 是指檔案下載路徑，這裡我把它掛在外接硬碟上方便存取。</p><p>接著啟動 <code>aria2c</code> 並指定設定文件所在位置。</p><p><code>aria2c --conf-path=/home/pi/.aria2/aria2.conf</code></p><p>看一下進程有沒有成功</p><p><code>ps aux | grep aria2</code></p><h1 id="設定開機啟動服務"><a href="#設定開機啟動服務" class="headerlink" title="設定開機啟動服務"></a>設定開機啟動服務</h1><p>建立設定文件</p><p><code>sudo vim /lib/systemd/system/aria2.service</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Aria2 Service</span><br><span class="line">Requires=network.target</span><br><span class="line">After=dhcpcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=pi</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.conf</span><br><span class="line">ExecReload=/usr/bin/kill -HUP $MAINPID</span><br><span class="line">ExecStop=/usr/bin/kill -s STOP $MAINPID</span><br><span class="line">RestartSec=1min</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>接著載入服務並啟動檢查是否成功：</p><p><code>sudo systemctl daemon-reload</code></p><p><code>sudo systemctl enable aria2</code></p><p><code>sudo systemctl start aria2</code></p><p><code>sudo systemctl status aria2</code></p><p>成功的話會顯示類似下方狀態</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">● aria2.service - Aria2 Service</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/aria2.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Fri 2019-11-15 16:01:37 GMT; 4s ago</span><br><span class="line"> Main PID: 1509 (aria2c)</span><br><span class="line">    Tasks: 1 (limit: 4915)</span><br><span class="line">   Memory: 3.4M</span><br><span class="line">   CGroup: /system.slice/aria2.service</span><br><span class="line">           └─1509 /usr/bin/aria2c --conf-path=/home/pi/.aria2/aria2.conf</span><br><span class="line"></span><br><span class="line">Nov 15 16:01:37 pinas systemd[1]: Started Aria2 Service.</span><br><span class="line">Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [WARN] Neither --rpc-secret nor a combination of --rpc-user and --rpc</span><br><span class="line">Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv4 RPC: listening on TCP port 6800</span><br><span class="line">Nov 15 16:01:37 pinas aria2c[1509]: 11/15 16:01:37 [NOTICE] IPv6 RPC: listening on TCP port 6800</span><br></pre></td></tr></table></figure><h1 id="安裝-Nginx-網頁伺服器"><a href="#安裝-Nginx-網頁伺服器" class="headerlink" title="安裝 Nginx 網頁伺服器"></a>安裝 Nginx 網頁伺服器</h1><p>安裝 nginx （若有其他網頁伺服器也可以，如 Apache 等）</p><p><code>sudo apt install nginx</code></p><p>啟動服務</p><p><code>sudo /etc/init.d/nginx start</code></p><p>在瀏覽器輸入 <a href="http://RASPBERRYPI-IP/" target="_blank" rel="noopener">http://RASPBERRYPI-IP/</a></p><p>看到 <code>Welcome to nginx!</code> 等字樣代表伺服器成功安裝並且正常執行了</p><h1 id="安裝-AriaNG-網頁操作界面"><a href="#安裝-AriaNG-網頁操作界面" class="headerlink" title="安裝 AriaNG 網頁操作界面"></a>安裝 AriaNG 網頁操作界面</h1><p>下載 <a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">AriaNG</a>，撰文時最新版為1.1.4，有更新版可以自行檢查。</p><p><code>wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/AriaNg-1.1.4.zip</code></p><p>解壓縮</p><p><code>unzip AriaNg-1.1.4.zip -d aria-ng</code></p><p>把資料夾搬去伺服器的網頁目錄底下（ nginx 預設為 /var/www/html ）</p><p><code>sudo mv aria-ng /var/www/html/</code></p><p>此時瀏覽器輸入 <code>http://RASPBERRYPI-IP/aria-ng</code> 即可看到 AriaNG 的界面了。</p><p>在如下設定分頁內填入相關設定（ IP 或 hostname，預設 Port 為 <code>6800</code> ），看到 <code>Connected</code> 即可開始遠端操作下載等任務了！</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/v1573834062/blog/2019/11/%E5%AE%89%E8%A3%9D%20Aria2%20%E5%9C%A8%20RaspberryPi%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%BD%8E%E8%80%97%E4%B8%8B%E8%BC%89%E6%A9%9F/Screen_Shot_2019-11-16_at_12.07.37_AM.png" alt></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://github.com/aria2/aria2" target="_blank" rel="noopener">aria2</a></p><p><a href="https://github.com/mayswind/AriaNg" target="_blank" rel="noopener">AriaNG</a></p><p><a href="https://medium.com/@sajithneyo/remote-download-server-in-linux-using-aria2-5bd3ee1a54b2" target="_blank" rel="noopener">Remote Download Server in Linux using Aria2</a></p><p><a href="https://li-aaron.github.io/2019/01/aira2-on-raspberry/" target="_blank" rel="noopener">用树莓派 Raspberry Pi 远程下载 (aria2)</a></p><p><a href="https://www.raspberrypi.org/documentation/remote-access/web-server/nginx.md" target="_blank" rel="noopener">Setting up an NGINX web server on a Raspberry Pi</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://aria2.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Aria2&lt;/a&gt; 是一個超輕量但功能的強大開源下載器，支援多點下載、多種協定、檔案分割下載、可透過 JSON-PRC 或 XML-PRC 遠端控制等功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Use Raspberry Pi to build a FAKE TimeCapsule (and NAS) - Hardware</title>
    <link href="https://blog.driftking.tw/en/2019/11/Use-RaspberryPi-to-build-a-FAKE-TimeCapsule-and-NAS-Hardware/"/>
    <id>https://blog.driftking.tw/en/2019/11/Use-RaspberryPi-to-build-a-FAKE-TimeCapsule-and-NAS-Hardware/</id>
    <published>2019-11-12T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.936Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533117/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122944.jpg" alt></p><p>There are plenty of Mac mini case modification projects on the internet. Though the unibody aluminum housing design had been there for almost a decade, it’s still the best looking mini computer case on the market imo.</p><p>In mid 2019, Raspberry Pi receive a huge update - the Pi 4. We finally got true gigabit ethernet, USB3.0 support, and a lot more. This makes Pi 4 suitable for simple NAS project (also for TimeMachine backup). So I decide to build a fake(?) TimeCapsule with Pi (at least the case is real, or should I just call it “Fake Mac mini” ? lol)<a id="more"></a></p><p>This article will show how I build this project, and the issue that I ran into (hardware side, the software configuration can be found at: <a href="https://blog.driftkingtw.me/archives/613e9fa3.html" target="_blank" rel="noopener">Use Raspberry Pi to build a FAKE TimeCapsule - Software</a>, <a href="https://blog.driftkingtw.me/archives/c138150d.html" target="_blank" rel="noopener">Use Raspberry Pi as a NAS</a>)(haven’t translate to English yet).</p><h1 id="Idea-amp-amp-Design"><a href="#Idea-amp-amp-Design" class="headerlink" title="Idea &amp;&amp; Design"></a>Idea &amp;&amp; Design</h1><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573474005/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20190924_200321.jpg" alt></p><p>I bought this used Mac mini case for cheap (around 20USD), it still in very good shape. You can buy it from ebay or AliExpress.</p><p>First, let’s do some simple measure. The maximum motherboard you can put inside is around 17cm*17inch (lots of people use Mini-ITX in Mac mini’s case.) Height is about 2.5cm, for our Pi project is more than enough.</p><p>Here’s the first design diagram (the hub will cause some issue so I connect the HDDs direct to Pi in final product, see <a href="#Troubleshooting">Troubleshooting</a>):</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573474811/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_D5FEECE2800F-1.jpg" alt></p><p>All I need to do is mount these things up. So I decide to draw some 3D printed files to do the job.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573476073/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_B9730CE991B7-1.jpg" alt></p><p>And here’s the diagram that shows each mounting hole’s distance I measured.</p><p>Next, the HDD mount. The arm on both side aren’t strong enough, so I just cut them off.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573488724/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/HDDMount.png" alt></p><p>Here comes the tricky part. Unfortunately, there’s no information about the mounting screw for Mac mini case. <a href="https://www.ifixit.com/Teardown/Mac+Mini+Mid+2010+Teardown/3094" target="_blank" rel="noopener">ifixit</a> only says it’s four 7.9mm long Torx screw, didn’t mention the shaft diameter.</p><p>I tried several screw that I have, luckily, one screw can screw in and quite stable. So I can use caliper to measure it’s size: 1.7mm (You can use M1.7 phillips tapping screw instead of official torx screw)</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573487949/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191111_211918.jpg" alt></p><p>Pi mounting plate. An isolation brick to protect GPIO pins is nice to have:</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573488945/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/PiMountFront.png" alt></p><p>Make some feet under the mounting plate.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573488967/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/PiMountBack.png" alt></p><p>The I/O shield (the plastic frame for Mini-ITX I/O shield is brought from other maker) Left side is for USB-C female connector and ethernet extender cable, right side for momentary power switch.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489134/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IOPanel.png" alt></p><p>I made some mistake about the side mounting holes on I/O shield, so just ignore it. (The ethernet extender cable’ screw can hold I/O shield in place) Also need to cut the Pi mounting plate to fit in the case.</p><p>Finally, the 30mm fan mount:</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489312/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/FanMount.png" alt></p><p>The STL files I used in this project can be download at: <a href="https://drive.google.com/open?id=1iUhxCqxGfxcIEYv6l-oQD4FoOvjMj0Gv" target="_blank" rel="noopener">PiMacMiniCaseSTLFiles</a></p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Alright, here’s the finished 3D printed items. (SLA Resin)</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489504/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191105_133114.jpg" alt></p><p>I’ve found that the holes on I/O shield are a bit too small. So need to enlarge the Type-C and switch hole for a better fit.</p><p>Sand down the surface and paint them in matte black.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489722/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191105_144436.jpg" alt></p><p>Ouch! There’s a crack on the edge when I try to trim it. But since it’s hide in the case, not a big deal.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489873/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191106_135017.jpg" alt></p><p>And I forgot the Micro SD on pi protrudes from the edge, so more trimming work need to be done.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489870/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191106_131709.jpg" alt></p><p>Then opens up the USB to SATA cable and cut out the VCC connect on board.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490103/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_115612.jpg" alt></p><p>Use some electrical tape to cover the board.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490109/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_151151.jpg" alt></p><p>Remember to check the pins with multimeter, make sure we didn’t ruined the cable.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490260/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_121531.jpg" alt></p><p>Screw in HDDs and test the mount.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490360/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_152116.jpg" alt></p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490432/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_155424.jpg" alt></p><p>And solder the power line to Type-C connector. One for HDDs, other for Pi.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490576/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_214430.jpg" alt></p><p>Momentary switch with LED. I use 1k Ohm resistor here.</p><p>About the wiring diagram you can check my other article: <a href="https://blog.driftkingtw.me/archives/59bd89a7.html" target="_blank" rel="noopener">Raspberry Pi - Power switch, External power LED, SD Act LED</a>(Haven’t translate to English yet)</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490776/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_215111.jpg" alt></p><p>Test it!</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490872/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_223930.jpg" alt></p><p>Glue the power switch and Type-C connector in place.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490996/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191111_221457.jpg" alt></p><p>Some simple wiring.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573532268/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_120240.jpg" alt></p><p>Put on the bottom cover.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573532315/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_120504.jpg" alt></p><p>Done!</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533117/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122944.jpg" alt></p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533113/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_121231.jpg" alt></p><p>Bay ~</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533114/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122934.jpg" alt></p><p><del>OK I think it just looks like a real Mac mini</del></p><p>PS The max cpu temperature is around 50°C (room temp:26~28°C)</p><h1 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h1><h3 id="Mac-mini-housing-screw-spec"><a href="#Mac-mini-housing-screw-spec" class="headerlink" title="Mac mini housing screw spec?"></a>Mac mini housing screw spec?</h3><p>I use phillips M1.7 x 6mm tapping screw.</p><h3 id="USB-powered-hub-issue"><a href="#USB-powered-hub-issue" class="headerlink" title="USB powered hub issue"></a>USB powered hub issue</h3><p>Some usb 3 powered hub will prevent Pi 4 from booting, here’s some discussion on Pi’s official forum: <a href="https://www.raspberrypi.org/forums/viewtopic.php?t=244900" target="_blank" rel="noopener">Pi 4 fails to boot when active USB switch attached</a>. You can unplug the powered hub and plug it back. Pi will starts to boot and everything worked fine, but it’s really annoying.</p><p>Some people reports that cut out the Vcc on hub can solve the issue, but I tried and nothing happened :(</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573528606/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191106_221851.jpg" alt></p><p>So I end up modify the USB to SATA cable instead.</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490109/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_151151.jpg" alt></p><h3 id="HDD-and-pi-both-using-a-3A-Official-Power-Supply？"><a href="#HDD-and-pi-both-using-a-3A-Official-Power-Supply？" class="headerlink" title="HDD and pi both using a 3A Official Power Supply？"></a>HDD and pi both using a 3A Official Power Supply？</h3><p>I actually connect 2 HDD and Pi to the same power source, which is an official power supply. The main reason I do this is to avoid Pi’s USB port maximum 1.2A downstream limit. </p><p>I’ve measure the current drain on both HDD(w/ USB to SATA cable) and Pi, and it’s enough to be powered by a 3A power supply (my WD HDD’s peak current when activating is about 750mA) but can’t be power direct through Pi’s USB port due to 1.2A current limit. (I tried to connect direct to Pi’s USB, and one HDD fail to mount)</p><p>Note that 1 HDD is fine to direct plug it into Pi’s USB port.</p><h1 id="Item-list"><a href="#Item-list" class="headerlink" title="Item list"></a>Item list</h1><ul><li>1 x Pi 4 4GB</li><li>1 x 8G MicroSD Card for boot</li><li>1 x A1347 Apple Mac mini Case (Mid 2010)</li><li>2 x 2.5” HDD</li><li>2 x SATA to USB3 Cable</li><li>3D Printed Mount / IO Panel</li><li>1 x 30mm Fan</li><li>1 x Momentary Switch w/ LED &amp; Cap</li><li>1 x 3mm Front Panel LED</li><li>2 x Current-limiting Resistor (330Ω ~ 1kΩ)</li><li>1 x Gigabit Ethernet Network Extension Cable</li><li>1 x USB Type-C Male Connector w/ PCB</li><li>1 x USB Type-C Female Connector w/ PCB</li><li>Some USB Cable (Current support 3A at least)</li><li>3 x M3 Screw &amp;&amp; M3 Hex Nut for Fan Mounting</li><li>4 x M3 Screw for HDD Mounting</li><li>2 x M3 Screw for Ethernet Port Mounting</li><li>3 x M1.7 Tapping Screw for Case Mounting w/ M2 Washer</li><li>Some DuPont Line</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.ifixit.com/Teardown/Mac+Mini+Mid+2010+Teardown/3094" target="_blank" rel="noopener">Mac Mini Mid 2010 Teardown</a></p><p><a href="https://pinout.xyz/" target="_blank" rel="noopener">Raspberry Pi GPIO Pinout</a></p><p><a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/specifications/" target="_blank" rel="noopener">Raspberry Pi 4 Tech Specs</a></p><p><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/power/README.md" target="_blank" rel="noopener">Power Supply</a></p><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=244900" target="_blank" rel="noopener">Pi 4 fails to boot when active USB switch attached</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533117/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122944.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;There are plenty of Mac mini case modification projects on the internet. Though the unibody aluminum housing design had been there for almost a decade, it’s still the best looking mini computer case on the market imo.&lt;/p&gt;
&lt;p&gt;In mid 2019, Raspberry Pi receive a huge update - the Pi 4. We finally got true gigabit ethernet, USB3.0 support, and a lot more. This makes Pi 4 suitable for simple NAS project (also for TimeMachine backup). So I decide to build a fake(?) TimeCapsule with Pi (at least the case is real, or should I just call it “Fake Mac mini” ? lol)&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="MacOS" scheme="https://blog.driftking.tw/tags/MacOS/"/>
    
      <category term="NAS" scheme="https://blog.driftking.tw/tags/NAS/"/>
    
      <category term="TimeCapsule" scheme="https://blog.driftking.tw/tags/TimeCapsule/"/>
    
      <category term="TimeMachine" scheme="https://blog.driftking.tw/tags/TimeMachine/"/>
    
  </entry>
  
  <entry>
    <title>利用 Raspberry Pi 搭建 TimeCapsule（仮）- 硬體篇</title>
    <link href="https://blog.driftking.tw/2019/11/Use-RaspberryPi-to-build-a-FAKE-TimeCapsule-and-NAS-Hardware/"/>
    <id>https://blog.driftking.tw/2019/11/Use-RaspberryPi-to-build-a-FAKE-TimeCapsule-and-NAS-Hardware/</id>
    <published>2019-11-12T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533117/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122944.jpg" alt></p><p>前陣子看到國外有人把舊的 Mac Mini 的機箱拿來改造，弄成 Router 或 HTPC 等，不得不說 Mac 的全鋁一體機箱真的挺好看，雖然設計已近十年未改，但放在 2019 年的桌面上仍不顯老氣 <del>反正中間那個商標放哪都能裝逼</del>。<a id="more"></a></p><p>看著別人改的成品很是心動<del>手癢</del>，於是上網搜了下，發現有不少人在賣二手的機殼，在國外看到了個價格及品相都非常好的機殼(約NT600)就買了下來(Mid 2010/A1347)。時間上正好 Raspberry Pi 更新了第四代，I/O效能上也終於符合了基本 NAS 的需求，於是想到可以把 Pi 裝在 Mac Mini 的機殼中，來做個簡易的偽 TimeCapsule + NAS，來當做無線 Time Machine 備份用及網路存儲設備。</p><p>本篇就來記錄一些想法跟製作過程，以及碰到的問題。 關於 Pi 4 的軟體設定部分，為了版面簡潔我把它寫在另外的兩篇，這裡就純記錄硬體部分：<a href="https://blog.driftkingtw.me/archives/613e9fa3.html" target="_blank" rel="noopener">利用 Raspberry Pi 搭建 TimeCapsule（仮）- 軟體篇</a>、<a href="https://blog.driftkingtw.me/archives/c138150d.html" target="_blank" rel="noopener">利用 Raspberry Pi 搭建 NAS</a></p><h1 id="想法-amp-amp-設計"><a href="#想法-amp-amp-設計" class="headerlink" title="想法 &amp;&amp; 設計"></a>想法 &amp;&amp; 設計</h1><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573474005/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20190924_200321.jpg" alt="收到的機殼，品相良好，只有一個非常不顯眼的小喀傷"></p><p>首先依照 Mac Mini 機殼的容量，大約能放下 17*17cm 的主板（ 網路上大部分是拿 Thin Mini-ITX來裝 ），高不能超過 2.5cm ，約兩個 USB Type-A 堆疊的高度，那當然我用的是更小的 Pi，只要另外考慮硬碟的擺放及走線即可。</p><p>以下是一開始的設計圖（ 後來 Hub 的設計被廢掉了，詳細問題有記錄在下方遇到的問題裡 ）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573474811/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_D5FEECE2800F-1.jpg" alt></p><p>接著得想個辦法固定這堆玩意，最省心的方法大概就是直接做個絕緣塞進去，但是這樣實在太醜了 <del>用 Mac 機殼不就是要好看</del>，而且不知道時間久了會發生什麼問題，Server 是打算 7x24 不關機的，考量到散熱及穩定性 <del>還有不想要裡面太醜的強迫症</del>，最後還是乖乖畫個 3D 設計稿然後找代印來做固定支撐的部分。</p><p>然而這才是麻煩的開始，由於上網翻不到 Mac Mini Case 的機械圖，也沒有人分享螺絲孔距等數據，只好自力救濟徒手量測。單純用直尺量測實在很麻煩，空間不大遊標卡尺也不方便，只好先量兩孔間直角三角形的兩邊大概長度，再對照直線距離用畢式定理去推算量出來的距離對不對（感覺挺蠢的但是也想不到其他方法），才勉強量出了孔距。</p><p>幸好最後印出來是吻合的沒問題（孔徑我開2mm，距離是以孔心為基準），這邊放個測量結果，有需要的人可以少走歪路（直接看垂直的距離就好，直線距離可能稍微跑掉）。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573476073/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_B9730CE991B7-1.jpg" alt></p><p>再來是比較棘手的硬碟支架部分，原本看上蘋果原廠自己的就支援了雙硬碟（Server版本、無光碟機版之類，記得到 2014 機箱都是 A1347），我買的機殼並沒有附送，硬碟架比較難找，後來看看只有 eBay 上有價格可以也有貨的。</p><p>不過原廠的支架在不破壞結構的前提下可能要另外製作特殊的 Sata 7+15 Pin 延長線才有辦法塞雙硬碟，而且不幸的是我沒仔細看規格，以致於買回來的支架其實是有光碟機版本（那賣家圖片放成雙硬碟位的…我就傻傻相信了 ｡ﾟヽ(ﾟ´Д`)ﾉﾟ｡ ）最後只能認命自己列印硬碟架了，原廠硬碟架再另外售出給剛好需要的人。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573476669/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191102_152723.jpg" alt="買錯的支架"></p><p>原本硬碟支架的設計圖，後來發現樹脂這個厚度不太穩，裡面的卡楯點又沒量準所以把旁邊的固定臂鋸掉了，只留下中間支撐硬碟的部分：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573488724/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/HDDMount.png" alt></p><p>最麻煩的底部固定螺絲部分，我參考了 <a href="https://www.ifixit.com/Teardown/Mac+Mini+Mid+2010+Teardown/3094" target="_blank" rel="noopener">ifixit</a> 的各種拆解，都只提到底座的螺絲是 “ 7.9mm Torx 6 Screw “，完全找不到有人提到直徑是多少… 在完全缺乏資訊的狀況下，我找了幾個螺絲試鎖，有一個能夠鎖進去鎖緊，但是太短了。</p><p>由於沒有遊標卡尺所以只好買了 M1.4、M1.5、M1.6 的回來測試，薑薑！全錯，最後只能認命買了遊標卡尺回來測量。正確尺寸應該是 M1.7，因為是鎖金屬殼所以用自攻螺絲，更詳細的我就不太確定了（手邊工具無法量測），至少 M1.7 自攻是鎖的進去而且穩定，一樣有需要的人可以再少走一條歪路了 ｡ﾟヽ(ﾟ´Д`)ﾉﾟ｡</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573487949/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191111_211918.jpg" alt></p><p>GPIO 旁邊設計了擋板以免其他線材觸碰到：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573488945/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/PiMountFront.png" alt></p><p>背面加上了一些墊高用的腳腳：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573488967/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/PiMountBack.png" alt></p><p>再來要考慮的是擋板（外框這裡是購買別人設計好的現成可以裝 Mini-ITX 擋板的塑膠框），稍微在腦中模擬了一下走線，考慮美觀的情況希望 USB-C 電源跟網路口要在一起，所以開關放左邊（以底蓋朝上的方向為基準），電源跟網路放右邊，靠樹莓派那測設計了一些出風口增加散熱能力，中間也開了一段方便進風。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489134/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IOPanel.png" alt></p><p>中間兩個突起的三角塊原本是打算跟底板用機械螺絲固定，不過尺寸沒量好，後來直接靠網路口鎖螺絲上去固定住IO擋板，Pi 固定底座原本要固定擋板的部分就鋸掉。</p><p>最後按照官方的 Pi 4 機械繪圖來做風扇支架：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489312/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/FanMount.png" alt></p><p> 這次用到的 3D 列印的檔案在最下面有連結，歡迎自行免費取用，但請不要拿去用於商業用途。</p><p> 接下來就是把東西準備好開始裝機跟佈線囉 (ﾟ∀ﾟ)</p><h1 id="製作過程"><a href="#製作過程" class="headerlink" title="製作過程"></a>製作過程</h1><p>這是拿到 3D 列印成品的照片，接著要把硬碟架兩側的腳跟後面量錯的定位口弄掉，然後打磨後上漆：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489504/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191105_133114.jpg" alt></p><p>IO擋板的部分我也另外作了處理，首先是 Type-C 我測量成公頭的尺寸，所以用銼刀擴孔後母座才放的進去，以及電源開關的部分尺寸剛好，稍微擴孔後才能順暢的按壓。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489722/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191105_144436.jpg" alt></p><p>上圖是處理過的硬碟支架，有個三角缺口是鋸的時候可能力道不平衡 (((ﾟДﾟ;)))，不過放在裡面不太影響，把尖銳的部分打磨即可。</p><p>噴漆灌上漆（可以看到上面的橫條可能太細，樹脂強度不夠，不過主結構沒問題）：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489873/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191106_135017.jpg" alt></p><p>Pi 支架的部分，設計的時候忘記了 Micro SD 會突出一些，所以只好擴一些空間。不過弄的時候樹脂不夠強不小心弄斷了，還好螺絲兩邊都會鎖到，所以補強一下沒問題：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573489870/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191106_131709.jpg" alt></p><p>原本要使用 Hub 來管理硬碟，不過遇到了些問題，索性把 USB to SATA 的轉接線拆了，把供電的部分另外拉出來（原 USB 線與 PCB 的 Vbus 供電要隔離）：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490103/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_115612.jpg" alt></p><p>上蓋就不蓋回去了，用抗靜電耐熱膠帶貼著，可以降低厚度</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490109/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_151151.jpg" alt></p><p>每個步驟都要先用電錶量過確認，然後上機測試：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490260/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_121531.jpg" alt></p><p>裝上硬碟架，測試高度厚度，然後假組確認尺寸跟線材長度有沒有問題：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490360/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_152116.jpg" alt></p><p>（有在硬碟上下加上 1mm 的抗靜電棉，減少震動跟防止靜電，硬碟上在仿原廠貼導電織布與機殼接觸）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490432/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_155424.jpg" alt></p><p>接著把兩個硬碟的電源線接上 Type-C 座，然後拉另一條給 Pi 供電，這邊使用了 5A 的線材所以有點粗，費了一番功夫才焊好（ Type-C 還真不適合手焊粗線材，後來我還有另外從兩個 CC Pin 拉出杜邦母頭，可以加上兩個 5k1 電阻讓 Pi4 支援 E-mark 線材</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490576/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_214430.jpg" alt></p><p>帶燈開關的部分，跟機殼前方的 LED 並聯，並各串上 1k 電阻（亮度我不希望太亮），關於添加燈以及風扇控制等方法請參考另一篇文章:<a href="https://blog.driftkingtw.me/archives/59bd89a7.html" target="_blank" rel="noopener">替 Raspberry Pi 添加開關、外接電源燈、狀態燈，以及風扇控制</a></p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490776/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_215111.jpg" alt></p><p>裸機測試，確定沒問題再裝機：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490872/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_223930.jpg" alt></p><p>面板我沒想到很好的固定方法，除了網路口用螺絲外，電源跟開關都是用熱溶膠 + 防靜電膠帶弄上的，這部分設計上還有改進空間。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490996/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191111_221457.jpg" alt></p><p>最後完整裝機，鎖上螺絲！</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573532268/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_120240.jpg" alt></p><p>關上背蓋（有點清潔時候的水漬還沒乾XD）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573532315/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_120504.jpg" alt></p><p>完成！來幾張照片ヽ(✿ﾟ▽ﾟ)ノ</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533117/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122944.jpg" alt></p><p>屁屁</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533113/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_121231.jpg" alt></p><p>Bay ~</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533114/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122934.jpg" alt></p><p><del>好吧外觀其實看起來就是個普通 Mac Mini</del></p><p>PS 風扇啟動時（無散熱片）溫度可以維持在不超過 50°C （室溫約 26~28°C），散熱效果還算不錯。</p><h1 id="遇到的問題-amp-amp-解決方法"><a href="#遇到的問題-amp-amp-解決方法" class="headerlink" title="遇到的問題 &amp;&amp; 解決方法"></a>遇到的問題 &amp;&amp; 解決方法</h1><h3 id="機箱固定螺絲問題"><a href="#機箱固定螺絲問題" class="headerlink" title="機箱固定螺絲問題"></a>機箱固定螺絲問題</h3><p>如上述，我用的底座機箱固定用螺絲規格為 M1.7 x 6 自攻螺絲 + M2 華司。</p><h3 id="USB-外部供電-Hub-問題"><a href="#USB-外部供電-Hub-問題" class="headerlink" title="USB 外部供電 Hub 問題"></a>USB 外部供電 Hub 問題</h3><p>Pi 4 除了 USB-C 設計會 <a href="https://blog.driftkingtw.me/archives/b2345c23.html" target="_blank" rel="noopener">使 E-mark 線材無法使用之外</a>，還有個問題是：使用帶獨立電源的 USB 3 Hub 在接上 Pi 的 USB 3 口上可能會導致開機或重啟時，無法進入 boot 程序。官方論壇也有人提出這個問題 <a href="https://www.raspberrypi.org/forums/viewtopic.php?t=244900" target="_blank" rel="noopener">Pi 4 fails to boot when active USB switch attached</a> ，雖然可以啟動時拔起 Hub 再插回去正常運作，但是麻煩而且裝箱後不可能重啟又打開插拔。</p><p>大致推測下來，可能是 Pi 4 使用 USB 3 時，有獨立供電的 Hub 會反向供電（Power feedback）給 Pi，於是可以考慮將 Hub 與 Pi 之間的 Vbus 隔離，但我的 Orico Hub 仍然無法正常啟動（有些人回報切斷 Vbus 後就正常運作），論壇裡也有人和我一樣切 Vbus 仍然失敗的，韌體等更新也測試過了無法。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573528606/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191106_221851.jpg" alt></p><p>最後只好改成直接把 SATA to USB 轉接線的電源拉出來做使用，目前解決了無法啟動的問題。目前只有少數 Hub 有辦法正常運作（通常比較貴，可能 USB 線那有做二極體防止反向供電？）選購時要注意一下。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490109/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191107_151151.jpg" alt></p><h3 id="2-個-HDD-直接用樹莓派官方電供供電？"><a href="#2-個-HDD-直接用樹莓派官方電供供電？" class="headerlink" title="2 個 HDD 直接用樹莓派官方電供供電？"></a>2 個 HDD 直接用樹莓派官方電供供電？</h3><p>從文中可以看出其實我 2 HDD 的電源也是直接接上與 Pi 同一個電源的，那為何要多此一舉把電源獨立拉出來（總電流還是只有 3A）？主要是因為兩個 2.5” HDD + Pi 本身的電流，3A 是足夠驅動的，不過 Pi 的 USB downstream 限制在 1.2A （可以理解為四個 USB 口只能消耗最高 1.2A ），雖然硬碟上標示 0.55A ，但還要考慮到轉接線的耗電。實際測試後單顆 2.5” HDD 啟動電流約為 0.7~0.8A 左右，Pi 本身耗電約 0.6~1.2A 之間。</p><p>最後的解決方法就是必須使用外接的 Hub 確保兩個 HDD 啟動電流足夠，繞過 USB downstream 1.2A 的限制（但是可以接同一個 3A 電源沒問題），或是如上把轉接線那電源供應獨立接出來。至於直接接上兩個 HDD 也是有實際實驗過了，真的沒辦法，其中一個硬碟會無法掛載 ╮(╯_╰)╭</p><p>以上大概就是這次踩到比較大的坑，以及解決方法，也想把 Pi 裝在 Mac Mini 機箱的朋友可以參考。</p><h1 id="材料清單"><a href="#材料清單" class="headerlink" title="材料清單"></a>材料清單</h1><ul><li>1 x Pi 4 4GB</li><li>1 x 8G MicroSD Card for boot</li><li>1 x A1347 Apple Mac mini Case (Mid 2010)</li><li>2 x 2.5” HDD</li><li>2 x SATA to USB3 Cable</li><li>STL 3D Printed Mount / IO Panel</li><li>1 x 30mm Fan</li><li>1 x Momentary Switch w/ LED &amp; Cap</li><li>1 x 3mm Front Panel LED</li><li>2 x Current-limiting Resistor (330Ω ~ 1kΩ)</li><li>1 x Gigabit Ethernet Network Extension Cable</li><li>1 x USB Type-C Male Connector w/ PCB</li><li>1 x USB Type-C Female Connector w/ PCB</li><li>Some USB Cable (Current support 3A at least)</li><li>3 x M3 Screw &amp;&amp; M3 Hex Nut for Fan Mounting</li><li>4 x M3 Screw for HDD Mounting</li><li>2 x M3 Screw for Ethernet Port Mounting</li><li>3 x M1.7 Tapping Screw for Case Mounting w/ M2 Washer</li><li>Some DuPont Line</li></ul><h1 id="本次所使用的-3D-檔案（STL）"><a href="#本次所使用的-3D-檔案（STL）" class="headerlink" title="本次所使用的 3D 檔案（STL）"></a>本次所使用的 3D 檔案（STL）</h1><p><a href="https://drive.google.com/open?id=1iUhxCqxGfxcIEYv6l-oQD4FoOvjMj0Gv" target="_blank" rel="noopener">PiMacMiniCaseSTLFiles</a></p><p>注意，目前還沒優化檔案，所以硬碟支架及 Pi 底座有瑕疵的部分需要的話可能還要自行調整或印出來後自行切割多餘的部分，孔位是沒問題的。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.ifixit.com/Teardown/Mac+Mini+Mid+2010+Teardown/3094" target="_blank" rel="noopener">Mac Mini Mid 2010 Teardown</a></p><p><a href="https://pinout.xyz/" target="_blank" rel="noopener">Raspberry Pi GPIO Pinout</a></p><p><a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/specifications/" target="_blank" rel="noopener">Raspberry Pi 4 Tech Specs</a></p><p><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/power/README.md" target="_blank" rel="noopener">Power Supply</a></p><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=244900" target="_blank" rel="noopener">Pi 4 fails to boot when active USB switch attached</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573533117/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191112_122944.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;前陣子看到國外有人把舊的 Mac Mini 的機箱拿來改造，弄成 Router 或 HTPC 等，不得不說 Mac 的全鋁一體機箱真的挺好看，雖然設計已近十年未改，但放在 2019 年的桌面上仍不顯老氣 &lt;del&gt;反正中間那個商標放哪都能裝逼&lt;/del&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="MacOS" scheme="https://blog.driftking.tw/tags/MacOS/"/>
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
      <category term="NAS" scheme="https://blog.driftking.tw/tags/NAS/"/>
    
      <category term="TimeCapsule" scheme="https://blog.driftking.tw/tags/TimeCapsule/"/>
    
      <category term="TimeMachine" scheme="https://blog.driftking.tw/tags/TimeMachine/"/>
    
  </entry>
  
  <entry>
    <title>替 Raspberry Pi 添加開關、外接電源燈、狀態燈，以及風扇控制</title>
    <link href="https://blog.driftking.tw/en/2019/11/%E6%9B%BFRaspberryPi%E6%B7%BB%E5%8A%A0%E9%96%8B%E9%97%9C_%E9%9B%BB%E6%BA%90%E7%87%88_%E7%A1%AC%E7%A2%9F%E7%87%88/"/>
    <id>https://blog.driftking.tw/en/2019/11/替RaspberryPi添加開關_電源燈_硬碟燈/</id>
    <published>2019-11-11T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.938Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490872/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_223930.jpg" alt></p><p>用 Headless 方式玩樹莓派的朋友肯定都遇過一個問題，就是每次關機都要登入 ssh 才能正常關機，懶一點的直接拔電源，就算沒問題也很麻煩（ 懶到過去延長線切電源都不肯 （欸），所以不如加個開關吧，不僅省時省力還能用正常的 shutdown 程序關機，一石二鳥豈不美哉 (:3[__]4 <a id="more"></a></p><p>還有很多時候因為 Pi 裝著殼，要得知是否開機、狀態燈有沒有在閃爍並不是那麼方便，本篇也一並記錄了裝上外接電源燈、狀態燈的步驟！</p><p>最後另外在補上風扇的控制方式（ Pi 4 工作時很熱情，大部分人可能會選擇上風扇XD ）但是溫度也不是隨時都那麼高，有了風扇控制可以依照溫度所需啟動，不但降低噪音也能增加風扇使用壽命，順便省一點點電，拯救北極熊（？）（風扇控制目前還在準備中，測試完成後會在更新電路圖）</p><h1 id="硬體設定"><a href="#硬體設定" class="headerlink" title="硬體設定"></a>硬體設定</h1><p>開關 &amp;&amp; 電源燈線路圖</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573278749/blog/2019/11/%E6%9B%BF%20Raspberry%20Pi%20%E6%B7%BB%E5%8A%A0%E9%96%8B%E9%97%9C%E3%80%81%E5%A4%96%E6%8E%A5%E9%9B%BB%E6%BA%90%E7%87%88%E3%80%81%E7%8B%80%E6%85%8B%E7%87%88%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%A2%A8%E6%89%87%E6%8E%A7%E5%88%B6/IMG_DC3D9F54D1D5-1.jpg" alt></p><p>SD讀取燈 &amp;&amp; 風扇（控制電路待補）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573278969/blog/2019/11/%E6%9B%BF%20Raspberry%20Pi%20%E6%B7%BB%E5%8A%A0%E9%96%8B%E9%97%9C%E3%80%81%E5%A4%96%E6%8E%A5%E9%9B%BB%E6%BA%90%E7%87%88%E3%80%81%E7%8B%80%E6%85%8B%E7%87%88%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%A2%A8%E6%89%87%E6%8E%A7%E5%88%B6/IMG_4CCC4C50487E-1.jpg" alt></p><h1 id="軟體設定"><a href="#軟體設定" class="headerlink" title="軟體設定"></a>軟體設定</h1><h3 id="開關（正常軟體關機程序）"><a href="#開關（正常軟體關機程序）" class="headerlink" title="開關（正常軟體關機程序）"></a>開關（正常軟體關機程序）</h3><p>這邊開關的部分參考了 howchoo 上的一篇文章：<a href="https://howchoo.com/g/mwnlytk3zmm/how-to-add-a-power-button-to-your-raspberry-pi" target="_blank" rel="noopener">How to Add a Power Button to Your Raspberry Pi</a>，以下是直接使用作者所寫好的 Script 安裝，詳細背後的 Code 以及原理可以點進連結裡查看（英文）。</p><p>安裝 Git</p><p><code>sudo apt-get install git</code></p><p>接著 clone 作者所寫好的 Script <a href="https://github.com/Howchoo/pi-power-button" target="_blank" rel="noopener">Howchoo/pi-power-button</a></p><p><code>git clone https://github.com/Howchoo/pi-power-button.git</code></p><p>安裝即可</p><p><code>./pi-power-button/script/install</code></p><h3 id="電源燈"><a href="#電源燈" class="headerlink" title="電源燈"></a>電源燈</h3><p>進入樹莓派設定界面</p><p><code>sudo raspi-config</code></p><p>選擇 <code>Interface Options</code> 開啟 <code>Serial</code> 來允許串列讀取，這樣我們就可以利用 GPIO 上的 TXD 來讓 LED 顯示目前是否為開機狀態（直接接 5V 的話只要插上電就會亮，沒辦法判斷樹莓派是否在開機狀態）</p><p>接著重啟樹莓派即可看到電源燈正常運作了</p><p><code>sudo reboot</code></p><h3 id="SD-卡讀取燈"><a href="#SD-卡讀取燈" class="headerlink" title="SD 卡讀取燈"></a>SD 卡讀取燈</h3><p>將 SD 卡插入電腦中，打開至根目錄找到一個叫做 <code>config.txt</code> 的設定檔，在底部添加以下設定。<br>最後的 GPIO 選擇自己要用的腳位即可（<a href="https://pinout.xyz/pinout/" target="_blank" rel="noopener">腳位參考</a>）</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Use external LED as ACT LED</span><br><span class="line">dtoverlay=pi3-act-led,gpio=19</span><br></pre></td></tr></table></figure><h3 id="風扇控制"><a href="#風扇控制" class="headerlink" title="風扇控制"></a>風扇控制</h3><p><strong>待補</strong></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.youtube.com/watch?v=_REhMZJ8GJY" target="_blank" rel="noopener">Add An External Sd Activity Light Raspberry Pi 3 Retropie Or Raspbian</a></p><p><a href="https://howchoo.com/g/mwnlytk3zmm/how-to-add-a-power-button-to-your-raspberry-pi" target="_blank" rel="noopener">How to Add a Power Button to Your Raspberry Pi</a></p><p><a href="https://www.youtube.com/watch?v=P5o0PpfzuW8" target="_blank" rel="noopener">#131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python</a></p><p><a href="https://howchoo.com/g/ytzjyzy4m2e/build-a-simple-raspberry-pi-led-power-status-indicator" target="_blank" rel="noopener">Build a Simple Raspberry Pi LED Power/Status Indicator</a></p><p><a href="http://www.irf.com/product-info/datasheets/data/irl530n.pdf" target="_blank" rel="noopener">IRL530N Datasheet</a></p><p><a href="https://www.youtube.com/watch?v=P5o0PpfzuW8" target="_blank" rel="noopener">#131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490872/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_223930.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;用 Headless 方式玩樹莓派的朋友肯定都遇過一個問題，就是每次關機都要登入 ssh 才能正常關機，懶一點的直接拔電源，就算沒問題也很麻煩（ 懶到過去延長線切電源都不肯 （欸），所以不如加個開關吧，不僅省時省力還能用正常的 shutdown 程序關機，一石二鳥豈不美哉 (:3[__]4&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="RaspberryPi" scheme="https://blog.driftking.tw/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>替 Raspberry Pi 添加開關、外接電源燈、狀態燈</title>
    <link href="https://blog.driftking.tw/2019/11/%E6%9B%BFRaspberryPi%E6%B7%BB%E5%8A%A0%E9%96%8B%E9%97%9C_%E9%9B%BB%E6%BA%90%E7%87%88_%E7%A1%AC%E7%A2%9F%E7%87%88/"/>
    <id>https://blog.driftking.tw/2019/11/替RaspberryPi添加開關_電源燈_硬碟燈/</id>
    <published>2019-11-11T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.918Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490872/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_223930.jpg" alt></p><p>用 Headless 方式玩樹莓派的朋友肯定都遇過一個問題，就是每次關機都要登入 ssh 才能正常關機，懶一點的直接拔電源，就算沒問題也很麻煩（ 懶到過去延長線切電源都不肯 （欸），所以不如加個開關吧，不僅省時省力還能用正常的 shutdown 程序關機，一石二鳥豈不美哉 (:3[__]4 <a id="more"></a></p><p>還有很多時候因為 Pi 裝著殼，要得知是否開機、狀態燈有沒有在閃爍並不是那麼方便，本篇也一並記錄了裝上外接電源燈、狀態燈的步驟！</p><p>最後另外在補上風扇的控制方式（ Pi 4 工作時很熱情，大部分人可能會選擇上風扇XD ）但是溫度也不是隨時都那麼高，有了風扇控制可以依照溫度所需啟動，不但降低噪音也能增加風扇使用壽命，順便省一點點電，拯救北極熊（？）（風扇控制目前還在準備中，測試完成後會在更新電路圖）</p><h1 id="硬體設定"><a href="#硬體設定" class="headerlink" title="硬體設定"></a>硬體設定</h1><p>開關 &amp;&amp; 電源燈線路圖</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573278749/blog/2019/11/%E6%9B%BF%20Raspberry%20Pi%20%E6%B7%BB%E5%8A%A0%E9%96%8B%E9%97%9C%E3%80%81%E5%A4%96%E6%8E%A5%E9%9B%BB%E6%BA%90%E7%87%88%E3%80%81%E7%8B%80%E6%85%8B%E7%87%88%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%A2%A8%E6%89%87%E6%8E%A7%E5%88%B6/IMG_DC3D9F54D1D5-1.jpg" alt></p><p>SD讀取燈 &amp;&amp; 風扇（控制電路待補）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573278969/blog/2019/11/%E6%9B%BF%20Raspberry%20Pi%20%E6%B7%BB%E5%8A%A0%E9%96%8B%E9%97%9C%E3%80%81%E5%A4%96%E6%8E%A5%E9%9B%BB%E6%BA%90%E7%87%88%E3%80%81%E7%8B%80%E6%85%8B%E7%87%88%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%A2%A8%E6%89%87%E6%8E%A7%E5%88%B6/IMG_4CCC4C50487E-1.jpg" alt></p><h1 id="軟體設定"><a href="#軟體設定" class="headerlink" title="軟體設定"></a>軟體設定</h1><h3 id="開關（正常軟體關機程序）"><a href="#開關（正常軟體關機程序）" class="headerlink" title="開關（正常軟體關機程序）"></a>開關（正常軟體關機程序）</h3><p>這邊開關的部分參考了 howchoo 上的一篇文章：<a href="https://howchoo.com/g/mwnlytk3zmm/how-to-add-a-power-button-to-your-raspberry-pi" target="_blank" rel="noopener">How to Add a Power Button to Your Raspberry Pi</a>，以下是直接使用作者所寫好的 Script 安裝，詳細背後的 Code 以及原理可以點進連結裡查看（英文）。</p><p>安裝 Git</p><p><code>sudo apt-get install git</code></p><p>接著 clone 作者所寫好的 Script <a href="https://github.com/Howchoo/pi-power-button" target="_blank" rel="noopener">Howchoo/pi-power-button</a></p><p><code>git clone https://github.com/Howchoo/pi-power-button.git</code></p><p>安裝即可</p><p><code>./pi-power-button/script/install</code></p><h3 id="電源燈"><a href="#電源燈" class="headerlink" title="電源燈"></a>電源燈</h3><p>進入樹莓派設定界面</p><p><code>sudo raspi-config</code></p><p>選擇 <code>Interface Options</code> 開啟 <code>Serial</code> 來允許串列讀取，這樣我們就可以利用 GPIO 上的 TXD 來讓 LED 顯示目前是否為開機狀態（直接接 5V 的話只要插上電就會亮，沒辦法判斷樹莓派是否在開機狀態）</p><p>接著重啟樹莓派即可看到電源燈正常運作了</p><p><code>sudo reboot</code></p><h3 id="SD-卡讀取燈"><a href="#SD-卡讀取燈" class="headerlink" title="SD 卡讀取燈"></a>SD 卡讀取燈</h3><p>將 SD 卡插入電腦中，打開至根目錄找到一個叫做 <code>config.txt</code> 的設定檔，在底部添加以下設定。<br>最後的 GPIO 選擇自己要用的腳位即可（<a href="https://pinout.xyz/pinout/" target="_blank" rel="noopener">腳位參考</a>）</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Use external LED as ACT LED</span><br><span class="line">dtoverlay=pi3-act-led,gpio=19</span><br></pre></td></tr></table></figure><h3 id="風扇控制"><a href="#風扇控制" class="headerlink" title="風扇控制"></a>風扇控制</h3><p><strong>待補</strong></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.youtube.com/watch?v=_REhMZJ8GJY" target="_blank" rel="noopener">Add An External Sd Activity Light Raspberry Pi 3 Retropie Or Raspbian</a></p><p><a href="https://howchoo.com/g/mwnlytk3zmm/how-to-add-a-power-button-to-your-raspberry-pi" target="_blank" rel="noopener">How to Add a Power Button to Your Raspberry Pi</a></p><p><a href="https://www.youtube.com/watch?v=P5o0PpfzuW8" target="_blank" rel="noopener">#131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python</a></p><p><a href="https://howchoo.com/g/ytzjyzy4m2e/build-a-simple-raspberry-pi-led-power-status-indicator" target="_blank" rel="noopener">Build a Simple Raspberry Pi LED Power/Status Indicator</a></p><p><a href="http://www.irf.com/product-info/datasheets/data/irl530n.pdf" target="_blank" rel="noopener">IRL530N Datasheet</a></p><p><a href="https://www.youtube.com/watch?v=P5o0PpfzuW8" target="_blank" rel="noopener">#131 Pimp my Raspberry: Automatic fan, automatic shutdown, automatic Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1573490872/blog/2019/11/%E5%88%A9%E7%94%A8%20Raspberry%20Pi%20%E6%90%AD%E5%BB%BA%20TimeCapsule%EF%BC%88%E4%BB%AE%EF%BC%89-%20%E7%A1%AC%E9%AB%94%E7%AF%87/IMG_20191108_223930.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;用 Headless 方式玩樹莓派的朋友肯定都遇過一個問題，就是每次關機都要登入 ssh 才能正常關機，懶一點的直接拔電源，就算沒問題也很麻煩（ 懶到過去延長線切電源都不肯 （欸），所以不如加個開關吧，不僅省時省力還能用正常的 shutdown 程序關機，一石二鳥豈不美哉 (:3[__]4&lt;/p&gt;
    
    </summary>
    
    
      <category term="DIY" scheme="https://blog.driftking.tw/tags/DIY/"/>
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>理解 Raspberry 4 Type C 設計問題</title>
    <link href="https://blog.driftking.tw/2019/10/%E7%90%86%E8%A7%A3_Raspberry_Pi_4_Type_C_%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/"/>
    <id>https://blog.driftking.tw/2019/10/理解_Raspberry_Pi_4_Type_C_設計問題/</id>
    <published>2019-10-26T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.913Z</updated>
    
    <content type="html"><![CDATA[<p>今年(2019)樹莓派基金會發表了久違的硬體更新，升級到了4代，相信有在關注的朋友們都知道，本次供電設計終於換成了 Type-C <del>(終於有種進化成現代化單片機的感覺)</del><br>不過也因為電源電路設計的一些問題導致了有 E-Mark 晶片的 USB-C 線材無法為樹莓派供電（例如 Apple 的 Macbook USB-C 充電線、Google Pixel 3 附帶的 USB-C 線材等），反倒是便宜的一般線材能夠正常運作XD<a id="more"></a> <del>證明樹莓派是給窮人家的玩具</del> 。</p><p>出於好奇我搜尋研究了一下原因，並且想了解決方法記錄在這篇文章中，本人不是這方面的專業人士，若有錯誤歡迎指出討論。</p><h1 id="Type-C-供電定義及設計"><a href="#Type-C-供電定義及設計" class="headerlink" title="Type-C 供電定義及設計"></a>Type-C 供電定義及設計</h1><p>下圖是 Type-C 的腳位圖，這次設計出現問題是位於兩個 CC 腳位的部分（ CC1 &amp; CC2 ），<br>CC (Configuration Channel) 腳位是 Type-C 重要的設定通道，可以利用不同的 CC 電阻設定判斷裝置資訊、決定模式，以及藉此支援正反插。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572070453/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.13.59_PM.png" alt></p><p>根據 <a href="https://www.usb.org/document-library/usb-type-cr-cable-and-connector-specification-revision-20-august-2019" target="_blank" rel="noopener">Type-C 定義文件</a>，藉由 CC 腳位的設定我們可以有以下不同的狀態：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572070948/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.22.22_PM.png" alt></p><p>樹莓派所需要的是從供電端拉 5V/3A 的電力，為接受電力的設備（ Sink Device ）（這裡我不知道怎麽翻譯比較適當XD），由圖表可知我們應該要將 CC 設定在第二或第三種狀態才能正常為樹莓派提供正確的電壓。</p><p>瞭解接腳定義後來看供電端與設備端連線時的簡化電路圖：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572071612/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.33.18_PM.png" alt></p><p>上圖為一般 Type-C 線材連接時的樣子，可以看到只有一條 CC 線接通兩邊，並且在右側設備端有接一個下拉電阻（ Pull-down Resistor：簡稱Rd ），供電端會藉由偵測到的阻值判斷所需要的 USB-C 狀態。</p><p>接著看看連上 E-mark 線材時的電路圖：（ E-mark 是在線裡的 IC ，可以提供 PD 通訊以及宣告這條線的資訊 ）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572072226/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.43.37_PM.png" alt></p><p>由上圖可以看到，線材內會有一個 Ra 下拉電阻，可以告訴供電端（DFP：Downstream-Facing Port ）在 CC2 上對 E-mark IC 提供 Vconn 電力。</p><p>簡單理解了 Type-C 的供電定義後，接著看樹莓派4的電源電路設計。</p><h1 id="Raspberry-Pi-4-電源電路"><a href="#Raspberry-Pi-4-電源電路" class="headerlink" title="Raspberry Pi 4 電源電路"></a>Raspberry Pi 4 電源電路</h1><p>樹莓派基金會已經釋出了除了 SoC 以外的<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/rpi_SCH_4b_4p0_reduced.pdf" target="_blank" rel="noopener">電路設計圖</a>，首先來看看電源電路的部分：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572071448/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.30.35_PM.png" alt></p><p>左側是 Type-C 的母座，接著把注意力放到 CC1 以及 CC2 兩隻腳位上，這裡的設計是把 CC1 及 CC2 短路後共同接一個 5k1Ω Rd 下拉電阻，在普通的線材下這個設計是完全沒問題的，PD 供電端因為線材只有一條 CC 相連，只會偵測到Rd電阻，另一條 CC 空接，按照前面的圖表可以看到樹莓派狀態是 Sink attached ，可以對其供電 5V/3A。</p><p>但是這設計接到 E-mark 線材的時候就不一樣了，由於 E-mark 線材裡面的 CC2 會有 Ra 下拉電阻，連接後 Ra(1kΩ) 會跟電源電路裡的 Rd(5k1Ω) 電阻並聯，分壓後變成 836Ω 等效電阻，供電端偵測到這阻值會把它當成 Ra（ 836Ω 屬於 Ra 的許可誤差範圍），參照上面 Type-C 狀態表可以發現，此時樹莓派被當成了音訊裝置（ Audio Adapter Accessory ，例如 USB-C 轉 3.5mm 音訊轉接器等裝置），於是供電端就不會對樹莓派輸出任何電力了！這就是為什麼普通線材可以正常使用，反而是較高級(?)的 E-mark 線材無法使用的原因。</p><p>順帶補充一下必須使用 E-mark 晶片的時機（ 只要滿足其中一項就需要 E-mark ）：</p><ol><li>VBUS 需要提供 3A 以上的電流</li><li>USB 3.1 Gen1 或 Gen2 協定</li><li>需要用到 Alternate Modes 時</li></ol><h1 id="修正方法"><a href="#修正方法" class="headerlink" title="修正方法"></a>修正方法</h1><p>理論上來說，應該要將樹莓派電源電路中的 CC1 以及 CC2 隔開後各接一個 5k1Ω 的 Rd 即可正常使用 E-mark 充電線了，但是由於那部分的電路設計在 Type-C 連接器下方，所以不容易施工，需要找另外的解決方案：</p><ol><li><p>翹起 Type-C 連接器上的 CC1 腳讓他另外接一個 Rd 電阻到 GND 請參考此<a href="https://www.raspberrypi.org/forums/viewtopic.php?t=249975" target="_blank" rel="noopener">樹莓派論壇文章</a></p></li><li><p>另外做一條 Type-C 延長線，自行在中間切斷 CC1 及 CC2 連接並自行接 Rd電阻到 GND</p></li></ol><p>實際操作待補上（買的材料還沒來，無法測試，等測試後在詳細記錄QQ）</p><p>PS. 有風聲說之後會有小改 PCB 解決此問題，不過那麼久了都沒消息，不知道何時才會改善</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為設計上的瑕疵，所以無法使用 E-mark 線材來為樹莓派供電，網路上有些說 PD 充電器無法使用其實算是不夠嚴謹的說法，因為若搭上無 E-mark 的線材還是能夠正常使用的（ 因為只有一條 CC 連通，且線材內沒有 Ra 並聯電源電路裡的 Rd，不會造成識別錯誤 ），省了一個 Rd 電阻但造成 E-mark 線材無法使用，真是這次樹莓派4最可惜的部分了。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://hackaday.com/2019/07/16/exploring-the-raspberry-pi-4-usb-c-issue-in-depth/" target="_blank" rel="noopener">EXPLORING THE RASPBERRY PI 4 USB-C ISSUE IN-DEPTH</a></p><p><a href="https://www.usb.org/document-library/usb-type-cr-cable-and-connector-specification-revision-20-august-2019" target="_blank" rel="noopener">USB Type-C® Cable and Connector Specification Revision 2.0, August 2019</a></p><p><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/rpi_SCH_4b_4p0_reduced.pdf" target="_blank" rel="noopener">SCHEMATIC1 : REDUCED SCHEMATICS</a></p><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=249975" target="_blank" rel="noopener">Fixing the Pi 4 usb C issue by hand</a></p><p><a href="https://www.ecnmag.com/article/2016/06/designing-type-c-electronically-marked-cable-part-1" target="_blank" rel="noopener">Designing a Type-C Electronically Marked Cable - Part 1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年(2019)樹莓派基金會發表了久違的硬體更新，升級到了4代，相信有在關注的朋友們都知道，本次供電設計終於換成了 Type-C &lt;del&gt;(終於有種進化成現代化單片機的感覺)&lt;/del&gt;&lt;br&gt;不過也因為電源電路設計的一些問題導致了有 E-Mark 晶片的 USB-C 線材無法為樹莓派供電（例如 Apple 的 Macbook USB-C 充電線、Google Pixel 3 附帶的 USB-C 線材等），反倒是便宜的一般線材能夠正常運作XD&lt;/p&gt;
    
    </summary>
    
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
      <category term="USB-C" scheme="https://blog.driftking.tw/tags/USB-C/"/>
    
  </entry>
  
  <entry>
    <title>理解 Raspberry 4 Type C 設計問題</title>
    <link href="https://blog.driftking.tw/en/2019/10/%E7%90%86%E8%A7%A3_Raspberry_Pi_4_Type_C_%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/"/>
    <id>https://blog.driftking.tw/en/2019/10/理解_Raspberry_Pi_4_Type_C_設計問題/</id>
    <published>2019-10-26T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.934Z</updated>
    
    <content type="html"><![CDATA[<p>今年(2019)樹莓派基金會發表了久違的硬體更新，升級到了4代，相信有在關注的朋友們都知道，本次供電設計終於換成了 Type-C <del>(終於有種進化成現代化單片機的感覺)</del><br>不過也因為電源電路設計的一些問題導致了有 E-Mark 晶片的 USB-C 線材無法為樹莓派供電（例如 Apple 的 Macbook USB-C 充電線、Google Pixel 3 附帶的 USB-C 線材等），反倒是便宜的一般線材能夠正常運作XD<a id="more"></a> <del>證明樹莓派是給窮人家的玩具</del> 。</p><p>出於好奇我搜尋研究了一下原因，並且想了解決方法記錄在這篇文章中，本人不是這方面的專業人士，若有錯誤歡迎指出討論。</p><h1 id="Type-C-供電定義及設計"><a href="#Type-C-供電定義及設計" class="headerlink" title="Type-C 供電定義及設計"></a>Type-C 供電定義及設計</h1><p>下圖是 Type-C 的腳位圖，這次設計出現問題是位於兩個 CC 腳位的部分（ CC1 &amp; CC2 ），<br>CC (Configuration Channel) 腳位是 Type-C 重要的設定通道，可以利用不同的 CC 電阻設定判斷裝置資訊、決定模式，以及藉此支援正反插。</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572070453/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.13.59_PM.png" alt></p><p>根據 <a href="https://www.usb.org/document-library/usb-type-cr-cable-and-connector-specification-revision-20-august-2019" target="_blank" rel="noopener">Type-C 定義文件</a>，藉由 CC 腳位的設定我們可以有以下不同的狀態：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572070948/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.22.22_PM.png" alt></p><p>樹莓派所需要的是從供電端拉 5V/3A 的電力，為接受電力的設備（ Sink Device ）（這裡我不知道怎麽翻譯比較適當XD），由圖表可知我們應該要將 CC 設定在第二或第三種狀態才能正常為樹莓派提供正確的電壓。</p><p>瞭解接腳定義後來看供電端與設備端連線時的簡化電路圖：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572071612/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.33.18_PM.png" alt></p><p>上圖為一般 Type-C 線材連接時的樣子，可以看到只有一條 CC 線接通兩邊，並且在右側設備端有接一個下拉電阻（ Pull-down Resistor：簡稱Rd ），供電端會藉由偵測到的阻值判斷所需要的 USB-C 狀態。</p><p>接著看看連上 E-mark 線材時的電路圖：（ E-mark 是在線裡的 IC ，可以提供 PD 通訊以及宣告這條線的資訊 ）</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572072226/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.43.37_PM.png" alt></p><p>由上圖可以看到，線材內會有一個 Ra 下拉電阻，可以告訴供電端（DFP：Downstream-Facing Port ）在 CC2 上對 E-mark IC 提供 Vconn 電力。</p><p>簡單理解了 Type-C 的供電定義後，接著看樹莓派4的電源電路設計。</p><h1 id="Raspberry-Pi-4-電源電路"><a href="#Raspberry-Pi-4-電源電路" class="headerlink" title="Raspberry Pi 4 電源電路"></a>Raspberry Pi 4 電源電路</h1><p>樹莓派基金會已經釋出了除了 SoC 以外的<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/rpi_SCH_4b_4p0_reduced.pdf" target="_blank" rel="noopener">電路設計圖</a>，首先來看看電源電路的部分：</p><p><img src="https://res.cloudinary.com/driftkingtw/image/upload/f_auto/v1572071448/blog/2019/10/%E7%90%86%E8%A7%A3%20Raspberry%204%20Type%20C%20%E8%A8%AD%E8%A8%88%E5%95%8F%E9%A1%8C/Screen_Shot_2019-10-26_at_2.30.35_PM.png" alt></p><p>左側是 Type-C 的母座，接著把注意力放到 CC1 以及 CC2 兩隻腳位上，這裡的設計是把 CC1 及 CC2 短路後共同接一個 5k1Ω Rd 下拉電阻，在普通的線材下這個設計是完全沒問題的，PD 供電端因為線材只有一條 CC 相連，只會偵測到Rd電阻，另一條 CC 空接，按照前面的圖表可以看到樹莓派狀態是 Sink attached ，可以對其供電 5V/3A。</p><p>但是這設計接到 E-mark 線材的時候就不一樣了，由於 E-mark 線材裡面的 CC2 會有 Ra 下拉電阻，連接後 Ra(1kΩ) 會跟電源電路裡的 Rd(5k1Ω) 電阻並聯，分壓後變成 836Ω 等效電阻，供電端偵測到這阻值會把它當成 Ra（ 836Ω 屬於 Ra 的許可誤差範圍），參照上面 Type-C 狀態表可以發現，此時樹莓派被當成了音訊裝置（ Audio Adapter Accessory ，例如 USB-C 轉 3.5mm 音訊轉接器等裝置），於是供電端就不會對樹莓派輸出任何電力了！這就是為什麼普通線材可以正常使用，反而是較高級(?)的 E-mark 線材無法使用的原因。</p><p>順帶補充一下必須使用 E-mark 晶片的時機（ 只要滿足其中一項就需要 E-mark ）：</p><ol><li>VBUS 需要提供 3A 以上的電流</li><li>USB 3.1 Gen1 或 Gen2 協定</li><li>需要用到 Alternate Modes 時</li></ol><h1 id="修正方法"><a href="#修正方法" class="headerlink" title="修正方法"></a>修正方法</h1><p>理論上來說，應該要將樹莓派電源電路中的 CC1 以及 CC2 隔開後各接一個 5k1Ω 的 Rd 即可正常使用 E-mark 充電線了，但是由於那部分的電路設計在 Type-C 連接器下方，所以不容易施工，需要找另外的解決方案：</p><ol><li><p>翹起 Type-C 連接器上的 CC1 腳讓他另外接一個 Rd 電阻到 GND 請參考此<a href="https://www.raspberrypi.org/forums/viewtopic.php?t=249975" target="_blank" rel="noopener">樹莓派論壇文章</a></p></li><li><p>另外做一條 Type-C 延長線，自行在中間切斷 CC1 及 CC2 連接並自行接 Rd電阻到 GND</p></li></ol><p>實際操作待補上（買的材料還沒來，無法測試，等測試後在詳細記錄QQ）</p><p>PS. 有風聲說之後會有小改 PCB 解決此問題，不過那麼久了都沒消息，不知道何時才會改善</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為設計上的瑕疵，所以無法使用 E-mark 線材來為樹莓派供電，網路上有些說 PD 充電器無法使用其實算是不夠嚴謹的說法，因為若搭上無 E-mark 的線材還是能夠正常使用的（ 因為只有一條 CC 連通，且線材內沒有 Ra 並聯電源電路裡的 Rd，不會造成識別錯誤 ），省了一個 Rd 電阻但造成 E-mark 線材無法使用，真是這次樹莓派4最可惜的部分了。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://hackaday.com/2019/07/16/exploring-the-raspberry-pi-4-usb-c-issue-in-depth/" target="_blank" rel="noopener">EXPLORING THE RASPBERRY PI 4 USB-C ISSUE IN-DEPTH</a></p><p><a href="https://www.usb.org/document-library/usb-type-cr-cable-and-connector-specification-revision-20-august-2019" target="_blank" rel="noopener">USB Type-C® Cable and Connector Specification Revision 2.0, August 2019</a></p><p><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/rpi_SCH_4b_4p0_reduced.pdf" target="_blank" rel="noopener">SCHEMATIC1 : REDUCED SCHEMATICS</a></p><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=249975" target="_blank" rel="noopener">Fixing the Pi 4 usb C issue by hand</a></p><p><a href="https://www.ecnmag.com/article/2016/06/designing-type-c-electronically-marked-cable-part-1" target="_blank" rel="noopener">Designing a Type-C Electronically Marked Cable - Part 1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年(2019)樹莓派基金會發表了久違的硬體更新，升級到了4代，相信有在關注的朋友們都知道，本次供電設計終於換成了 Type-C &lt;del&gt;(終於有種進化成現代化單片機的感覺)&lt;/del&gt;&lt;br&gt;不過也因為電源電路設計的一些問題導致了有 E-Mark 晶片的 USB-C 線材無法為樹莓派供電（例如 Apple 的 Macbook USB-C 充電線、Google Pixel 3 附帶的 USB-C 線材等），反倒是便宜的一般線材能夠正常運作XD&lt;/p&gt;
    
    </summary>
    
    
      <category term="USB-C" scheme="https://blog.driftking.tw/tags/USB-C/"/>
    
      <category term="RaspberryPi" scheme="https://blog.driftking.tw/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>利用 Raspberry Pi 搭建 NAS</title>
    <link href="https://blog.driftking.tw/2019/10/%E5%88%A9%E7%94%A8RaspberryPi%E6%90%AD%E5%BB%BANAS/"/>
    <id>https://blog.driftking.tw/2019/10/利用RaspberryPi搭建NAS/</id>
    <published>2019-10-12T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.911Z</updated>
    
    <content type="html"><![CDATA[<p>就只是個基於 Samba 的簡易 NAS 架設過程，沒有任何動靜。</p><p>BTW 目前還是使用 Pi3B ，升級後會在補上 Pi4B 速度的差異心得。未來打算再裝上 Aria2 讓 Pi 具有下載機的功能。<a id="more"></a></p><h1 id="準備工作"><a href="#準備工作" class="headerlink" title="準備工作"></a>準備工作</h1><p>首先安裝好最新的 Raspbian Lite 版本，開機後先進行基本設定（ 可以單純ssh操作省去外接的麻煩，關於headless可以參考我之前的文章：<a href="https://blog.driftkingtw.me/archives/6759087b.html" target="_blank" rel="noopener">Raspberry Zero W Headless 自動連上無線網路與開啟SSH</a> ）</p><p><code>sudo raspi-config</code></p><p>把預設密碼之類改一改，還有地區之類等基本設定。<br>設定完後先更新一下套件。</p><p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></p><h1 id="外接硬碟設定"><a href="#外接硬碟設定" class="headerlink" title="外接硬碟設定"></a>外接硬碟設定</h1><p>首先用 <code>lsblk</code> 找到要當 NAS 硬碟及分區(這邊是 <code>sda2</code> 代表 a 磁碟的 2 號分區)</p><p>格式化為 <code>ext4</code> 格式，<del>這邊推薦用 <code>ext4</code> 效能最好</del>（最近在做 NAS 優化，發現XFS的效果會更提升一些，可以參考<a href="#XFS-檔案格式">XFS 檔案格式</a>）</p><p><code>sudo mkfs.ext4 /dev/sda2</code></p><p><em>有些人可能會有疑問，如果用 <code>ext4</code> 會不會讓我無法在其他系統上讀取，這部分並不用擔心，因為這個硬碟格式只是給 Server 讀取寫入用的，客戶端支援的檔案格式不會影響到</em></p><p>建立掛載點</p><p><code>sudo mkdir /mnt/Share</code></p><p>查看硬碟分區的 <code>UUID</code> 並把它複製下來</p><p><code>sudo blkid</code></p><p>編輯 <code>fstab</code> 添加掛載資訊</p><p><code>sudo vim /etc/fstab</code></p><p>在最底行填上（”YOUR_UUID”替換成剛才複製的UUID）</p><p><code>UUID=YOUR_UUID  /mnt/Share  ext4  defaults  0 2</code></p><p>掛載硬碟(分區)</p><p><code>sudo mount -a</code></p><p>查看掛載狀態是否正確</p><p><code>df -h</code></p><p>最後開啟硬碟權限</p><p><code>chmod 777 /mnt/Share</code></p><h1 id="設定-Samba-Server"><a href="#設定-Samba-Server" class="headerlink" title="設定 Samba Server"></a>設定 Samba Server</h1><p>接著安裝 <code>Samba</code></p><p><code>sudo apt-get install samba samba-common-bin</code></p><p>完成後編輯 <code>/etc/samba/smb.conf</code></p><p><code>sudo vim /etc/samba/smb.conf</code></p><p>Global 部分填入限制使用者登入才能存取的設定</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">  security = user</span><br></pre></td></tr></table></figure><p>在文件最下面填入如下的分享目錄設定</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">  Comment = Pi Shared Folder</span><br><span class="line">  Path = /mnt/Share</span><br><span class="line">  Browseable = yes</span><br><span class="line">  Writable = yes</span><br><span class="line">  guest ok = no</span><br><span class="line">  valid users = username</span><br></pre></td></tr></table></figure><p>PS：valid users 後面替換成自己的 username。</p><p>接著我們要加入 smb 的登入帳號：</p><p><code>sudo smbpasswd -a username</code></p><p>依照提示輸入密碼設定完成，最後重啟 Samba 服務完成設定。</p><p><code>sudo service smbd restart</code></p><p>都設定完成後就可以在 Windows 網路芳鄰上看到 NAS 了（由於有限定使用者，要同樣帳號名稱密碼才能進的去，若要不希望限定帳號記得在 <code>smb.conf</code> 把 guest 功能打開）</p><p>MacOS 的話則在 Finder 下按 <code>CMD+K</code> 填入 <code>smb://raspberrypi.local/Share</code> ，輸入剛才設定的 smb 使用者帳號密碼即可連入 NAS 。</p><h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><h2 id="XFS-檔案格式"><a href="#XFS-檔案格式" class="headerlink" title="XFS 檔案格式"></a>XFS 檔案格式</h2><p>安裝 XFS 工具</p><p><code>sudo apt-get install xfsprogs</code></p><p>格式化 sda 硬碟為 xfs 格式</p><p><code>sudo mkfs.xfs -f /dev/sda</code></p><p>查看掛載狀態</p><p><code>df -h</code></p><h2 id="本地硬碟讀取速度測試"><a href="#本地硬碟讀取速度測試" class="headerlink" title="本地硬碟讀取速度測試"></a>本地硬碟讀取速度測試</h2><p>安裝 <code>hdparm</code></p><p><code>sudo apt-get install hdparm</code></p><p>測試讀取：</p><p><code>hdparm -t /dev/sda</code></p><p>測試寫入：</p><p><code>hdparm -t --direct /dev/sda</code></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="http://blog.jachobsen.com/2013/04/29/browse-raspberry-pi-in-osx-finder-via-samba/" target="_blank" rel="noopener">Browse Raspberry Pi in OSX Finder via Samba</a></p><p><a href="https://askubuntu.com/questions/79078/how-to-restart-samba-server" target="_blank" rel="noopener">How to restart samba server?</a></p><p><a href="http://ask.xmodulo.com/create-mount-xfs-file-system-linux.html" target="_blank" rel="noopener">How to create and mount an XFS file system on Linux</a></p><p><a href="https://shazi.info/hdparm-%E6%B8%AC%E8%A9%A6%E7%A1%AC%E7%A2%9F%E8%AE%80%E5%AF%AB%E9%80%9F%E5%BA%A6/" target="_blank" rel="noopener">hdparm 測試硬碟讀寫速度</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就只是個基於 Samba 的簡易 NAS 架設過程，沒有任何動靜。&lt;/p&gt;
&lt;p&gt;BTW 目前還是使用 Pi3B ，升級後會在補上 Pi4B 速度的差異心得。未來打算再裝上 Aria2 讓 Pi 具有下載機的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://blog.driftking.tw/tags/MacOS/"/>
    
      <category term="RaspberryPi/樹莓派" scheme="https://blog.driftking.tw/tags/RaspberryPi-%E6%A8%B9%E8%8E%93%E6%B4%BE/"/>
    
      <category term="NAS" scheme="https://blog.driftking.tw/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>利用 Raspberry Pi 搭建 NAS</title>
    <link href="https://blog.driftking.tw/en/2019/10/%E5%88%A9%E7%94%A8RaspberryPi%E6%90%AD%E5%BB%BANAS/"/>
    <id>https://blog.driftking.tw/en/2019/10/利用RaspberryPi搭建NAS/</id>
    <published>2019-10-12T13:25:00.000Z</published>
    <updated>2021-02-23T06:48:23.932Z</updated>
    
    <content type="html"><![CDATA[<p>就只是個基於 Samba 的簡易 NAS 架設過程，沒有任何動靜。</p><p>BTW 目前還是使用 Pi3B ，升級後會在補上 Pi4B 速度的差異心得。未來打算再裝上 Aria2 讓 Pi 具有下載機的功能。<a id="more"></a></p><h1 id="準備工作"><a href="#準備工作" class="headerlink" title="準備工作"></a>準備工作</h1><p>首先安裝好最新的 Raspbian Lite 版本，開機後先進行基本設定（ 可以單純ssh操作省去外接的麻煩，關於headless可以參考我之前的文章：<a href="https://blog.driftkingtw.me/archives/6759087b.html" target="_blank" rel="noopener">Raspberry Zero W Headless 自動連上無線網路與開啟SSH</a> ）</p><p><code>sudo raspi-config</code></p><p>把預設密碼之類改一改，還有地區之類等基本設定。<br>設定完後先更新一下套件。</p><p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></p><h1 id="外接硬碟設定"><a href="#外接硬碟設定" class="headerlink" title="外接硬碟設定"></a>外接硬碟設定</h1><p>首先用 <code>lsblk</code> 找到要當 NAS 硬碟及分區(這邊是 <code>sda2</code> 代表 a 磁碟的 2 號分區)</p><p>格式化為 <code>ext4</code> 格式，<del>這邊推薦用 <code>ext4</code> 效能最好</del>（最近在做 NAS 優化，發現XFS的效果會更提升一些，可以參考<a href="#XFS-檔案格式">XFS 檔案格式</a>）</p><p><code>sudo mkfs.ext4 /dev/sda2</code></p><p><em>有些人可能會有疑問，如果用 <code>ext4</code> 會不會讓我無法在其他系統上讀取，這部分並不用擔心，因為這個硬碟格式只是給 Server 讀取寫入用的，客戶端支援的檔案格式不會影響到</em></p><p>建立掛載點</p><p><code>sudo mkdir /mnt/Share</code></p><p>查看硬碟分區的 <code>UUID</code> 並把它複製下來</p><p><code>sudo blkid</code></p><p>編輯 <code>fstab</code> 添加掛載資訊</p><p><code>sudo vim /etc/fstab</code></p><p>在最底行填上（”YOUR_UUID”替換成剛才複製的UUID）</p><p><code>UUID=YOUR_UUID  /mnt/Share  ext4  defaults  0 2</code></p><p>掛載硬碟(分區)</p><p><code>sudo mount -a</code></p><p>查看掛載狀態是否正確</p><p><code>df -h</code></p><p>最後開啟硬碟權限</p><p><code>chmod 777 /mnt/Share</code></p><h1 id="設定-Samba-Server"><a href="#設定-Samba-Server" class="headerlink" title="設定 Samba Server"></a>設定 Samba Server</h1><p>接著安裝 <code>Samba</code></p><p><code>sudo apt-get install samba samba-common-bin</code></p><p>完成後編輯 <code>/etc/samba/smb.conf</code></p><p><code>sudo vim /etc/samba/smb.conf</code></p><p>Global 部分填入限制使用者登入才能存取的設定</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">  security = user</span><br></pre></td></tr></table></figure><p>在文件最下面填入如下的分享目錄設定</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">  Comment = Pi Shared Folder</span><br><span class="line">  Path = /mnt/Share</span><br><span class="line">  Browseable = yes</span><br><span class="line">  Writable = yes</span><br><span class="line">  guest ok = no</span><br><span class="line">  valid users = username</span><br></pre></td></tr></table></figure><p>PS：valid users 後面替換成自己的 username。</p><p>接著我們要加入 smb 的登入帳號：</p><p><code>sudo smbpasswd -a username</code></p><p>依照提示輸入密碼設定完成，最後重啟 Samba 服務完成設定。</p><p><code>sudo service smbd restart</code></p><p>都設定完成後就可以在 Windows 網路芳鄰上看到 NAS 了（由於有限定使用者，要同樣帳號名稱密碼才能進的去，若要不希望限定帳號記得在 <code>smb.conf</code> 把 guest 功能打開）</p><p>MacOS 的話則在 Finder 下按 <code>CMD+K</code> 填入 <code>smb://raspberrypi.local/Share</code> ，輸入剛才設定的 smb 使用者帳號密碼即可連入 NAS 。</p><h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><h2 id="XFS-檔案格式"><a href="#XFS-檔案格式" class="headerlink" title="XFS 檔案格式"></a>XFS 檔案格式</h2><p>安裝 XFS 工具</p><p><code>sudo apt-get install xfsprogs</code></p><p>格式化 sda 硬碟為 xfs 格式</p><p><code>sudo mkfs.xfs -f /dev/sda</code></p><p>查看掛載狀態</p><p><code>df -h</code></p><h2 id="本地硬碟讀取速度測試"><a href="#本地硬碟讀取速度測試" class="headerlink" title="本地硬碟讀取速度測試"></a>本地硬碟讀取速度測試</h2><p>安裝 <code>hdparm</code></p><p><code>sudo apt-get install hdparm</code></p><p>測試讀取：</p><p><code>hdparm -t /dev/sda</code></p><p>測試寫入：</p><p><code>hdparm -t --direct /dev/sda</code></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="http://blog.jachobsen.com/2013/04/29/browse-raspberry-pi-in-osx-finder-via-samba/" target="_blank" rel="noopener">Browse Raspberry Pi in OSX Finder via Samba</a></p><p><a href="https://askubuntu.com/questions/79078/how-to-restart-samba-server" target="_blank" rel="noopener">How to restart samba server?</a></p><p><a href="http://ask.xmodulo.com/create-mount-xfs-file-system-linux.html" target="_blank" rel="noopener">How to create and mount an XFS file system on Linux</a></p><p><a href="https://shazi.info/hdparm-%E6%B8%AC%E8%A9%A6%E7%A1%AC%E7%A2%9F%E8%AE%80%E5%AF%AB%E9%80%9F%E5%BA%A6/" target="_blank" rel="noopener">hdparm 測試硬碟讀寫速度</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就只是個基於 Samba 的簡易 NAS 架設過程，沒有任何動靜。&lt;/p&gt;
&lt;p&gt;BTW 目前還是使用 Pi3B ，升級後會在補上 Pi4B 速度的差異心得。未來打算再裝上 Aria2 讓 Pi 具有下載機的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://blog.driftking.tw/tags/MacOS/"/>
    
      <category term="NAS" scheme="https://blog.driftking.tw/tags/NAS/"/>
    
  </entry>
  
</feed>
